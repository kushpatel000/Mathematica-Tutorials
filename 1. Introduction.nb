(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    144071,       3320]
NotebookOptionsPosition[    133624,       2980]
NotebookOutlinePosition[    133958,       2995]
CellTagsIndexPosition[    133915,       2992]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "How Do I ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "?"
}], "Title",
 CellChangeTimes->{{3.640613383682064*^9, 3.640613409118104*^9}, {
  3.640615305546171*^9, 3.640615310665464*^9}}],

Cell["by Kush Patel", "Chapter",
 CellChangeTimes->{{3.640613414529113*^9, 3.6406134163301153`*^9}},
 FontSize->24]
}, Open  ]],

Cell[CellGroupData[{

Cell["Module 1 - Introduction", "Title",
 CellChangeTimes->{{3.6406153015159407`*^9, 3.6406153319286804`*^9}},
 FontSize->36],

Cell[CellGroupData[{

Cell["Foreward", "Section",
 CellChangeTimes->{{3.640613491623933*^9, 3.6406134925019827`*^9}}],

Cell[TextData[{
 "The idea of the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " tutorial series is to simplify the learning experience and lessen the \
learning curve required for you to be proficient enough to use the basic \
functionalities in ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "and feel capable enough to freely explore the rest of its complex \
capabilities",
 StyleBox[". ",
  FontSlant->"Italic"],
 "The series will begin with explaining syntax as well as the introduction of \
select, highly useful prebuilt functions. Later modules will discuss \
graphics, formatting, input/output, and more."
}], "Text",
 CellChangeTimes->{{3.640613531931238*^9, 3.640613644802701*^9}, {
  3.6406136753337545`*^9, 3.6406137570999155`*^9}, {3.640613787795966*^9, 
  3.640613822040032*^9}, {3.6406138762151194`*^9, 3.64061398018531*^9}, {
  3.6406149130877237`*^9, 3.6406149227742777`*^9}, {3.6452972379488845`*^9, 
  3.6452972402778883`*^9}}],

Cell[TextData[{
 "Having come this far, I know that you are at the very least, capable of \
installing a program onto a computer, copying files, and opening the ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "program. Awesome! This tutorial series is written such that someone with \
little to no prior coding experience can follow and aptly use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". So, hold on to your butts! and away we go..."
}], "Text",
 CellChangeTimes->{{3.6406150477814283`*^9, 3.640615186062337*^9}, {
  3.6406152401314297`*^9, 3.640615242674575*^9}, {3.6452097164464064`*^9, 
  3.6452097190025525`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.a\tHelp (F1)", "Section",
 CellChangeTimes->{{3.6406175108783092`*^9, 3.6406175203948536`*^9}}],

Cell[TextData[{
 "At any moment, you can highlight a character, word, or function and then \
press the F1 key. This will make ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " look up the highlighted section and bring you to a help page. The help \
page for various functions will bring up that function\[CloseCurlyQuote]s \
reference page which explains its usage and options available. "
}], "Text",
 CellChangeTimes->{{3.64061752558615*^9, 3.6406175713967705`*^9}, {
   3.640617704351375*^9, 3.6406177667779455`*^9}, {3.640617992991884*^9, 
   3.640617995200011*^9}, 3.6945742818397284`*^9}],

Cell["\<\
For example, the reference page for the HeavisidePi function looks like this.\
\>", "Text",
 CellChangeTimes->{{3.6406179396068306`*^9, 3.6406180238666506`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvQeUHNeVplm9u+fszJk9Z2Z2ptXblG91T6s1FGVXUoskHNlUm1W3RNGA
DiRsFcrBFLwt731VlktX6X1mee8LVfAgCMIDhKFE0ZMgKdNSt3r23vtMvMjM
SlTBSKI643zAiYqMjPfiRWTc/95334vPr9rw6Lr/LSUlJec/wH+Prty+dPPm
lTt/9F/gj8ezc9anZq9d83fZW9amrt38nVX/O2w8D/sG4B+u78wvB/YUVW/a
mbsue+u3v/vgd+5f9HvIt1W+ews8+K3b5K+BBwT0Z7zd5qzA/TfjbpyCrs53
hDnLummdv825m9fojl3f2+X/jeU7cbn/m3eDb3/348I3bodv3R3ucH3++uu3
yjc4d+1M71pzLeQeuMU7/Ovf+s7Xvvntr37jW1/+6tf/6n9++S/+8ouf/7M/
/8xnP/epT336T//0nk984hN//Md//N+Bmy1/rCyfoOVP/uRP/h+x/KlYYJX9
ec8993zyk5/8FBTz6c/g8tnPfvZzn0M++zn4AzbCJ/A57EbfijrMnyoHxAXK
+sQcy5/QIr9/zz28ZORTfKGCPinK0o4pF3kceaglS5Z8+tOfTk1Nve+++77y
1a9u3l2Ys7vwmVXr4QG47OHv2RyuC5evXHzlKnDpyrW7witxuLhgrt6Eyxpw
RnNy6cp5jVc4FzXOXbzMuRDDefj/EnJe46yOi5xznDPRXDitcf5lyVmVc6fO
JELuKQ8VVcppXSk64hR35vwpBI/8UhSnNU4iZ196+Rxw8uWzKi8yTgFnJCde
Oi05vhBgf34QOjivgHb6WNuXz8hq3yY3aep5Et1u+qabE96Y8+FsLC/GtPwJ
bPYz+jZ/+fhJzjHgReDU0YVzTMfLd5KTN+f4LXErx0zQCCfm5MiJlxJwlCP2
j23Sk6eUKp2WnDip/YJOnBS8dFrZR54pP4LumFFX7WRUQRxdKacYZ17Ucfbk
KXnX0d2ou43PA7rfFD5VLiQAH0RnLyLn5uTMeZVLP3n9jarq2leuXj9/CZ/D
Z+E4p8+efOnU8RMvHjl27PCRIwcPHpqZmTlAyzQglgNzLwcPHqyvrz958uQs
LQfFcki3HIblyJEjR48ePXbs+PETsLz4Inzn5EsnaTlxAjgBH+Hnx44bDAb4
E751KOYo8P9B/TKrWw6qFWCFinKjF9jMPmWHjToyO9bx48f37dt39uzZ2tra
e++9F2TED374Q1j58n33ZW3Z++Rza+776jfMVtvo9GxH35Ar1OUJ9wDeSO88
8QEdfRJ/J9AvCQBdwADSifhvQr+Kr7NPo0OHt6M3DqxWYcTD6eGEOO5QNyeA
uAJdTk6n09/p8HcgPsTuiwA2b8TmibR7wu1ujtUdtLqCFrfAGQDMnKBY8QMm
h89k95vsPqON09buAVqtSIvVzbG4mszOJrODYWAY7Y1GG1DfBrTXtwLWujYr
rre1NwDwqcluwK/Ad13NFmeL1QVHa2v3Aq2Ajf6H4oiWdrdSorsJCkXgu05W
YqMJaTDaG9rsUGhDm62utR2obbUiLe21LbBiqW2x1LSYq5ssNU2W6mZYQaoA
A1IJNDJM5Q1t5fVtZfWtnLrW0roWTu2clNQ0l9Q2wwrsD1+vaDDCoeD4UFZt
s7UO2wHqZm/A9mF1dhKOW8SINNwE+7zAdmPYdLQida28PTnYnu01LVZOs4ol
LtXN1OAqsvHFJaD2N1U0mCrqjdB65XVt0Ixlta3YtjXUtjXNRdXNRVVNhVWG
wkpDAdLIqYgH/9RQoOxcCFQxDHEpik+TpDAe+FF1czyaJMU1zXGovm20ozUh
WFaz0kQGaIp8QV5ZPZDLqdMordtfWouU1OwrqdlfWrO/BNf343Ykt7Q2t6yW
7ZwHlAP1+UBFA1AAUFNDoUWVhqjqwY+iRFSSrmNTCWsN1jLU7Hhp2HEqlGMS
9CdWnl1W9fJBsxdX4SmX8CPjrcJ+p/gbrMO7CH/L8EtETFUGwFxt4Lcf3ZxW
fDggeGOzp4fy09B+bgaTk4OPHXz4NDMsLkYLx92MT0hOq1gZmz60en1WsKu/
Hp5CBmNZdUNecdnOvbmbcralZ2WvXZf2/Asrn3r66SefXP7Ek7g8QQutPrk8
ZnmKlu3btz/yyCMVFRXPPvvsc8899zwtL7zwwsqVK1etWr169Zo1a9auhUOn
rc/K2rB585at23bs2rV3777c3LyCwqISIC+vcO++vF27927btmPjppzi4pJ/
+qcfgKiAb8L3VykL+/MFWlaI5TllYVugAlA4FL1uXWp6OpxZ9qZNOVu3boPj
b9vO2bJlG5SVlZW9fn067AaVhK/oDkv/FxQULF682Gg07ty5s6WlBZTJPffc
84UvfOF/3nvvc6vTv/7Nbzc1t3b3D7e7gw5/xB3sYtbTF+lLjB/o6GcEADLu
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
zRP0hnvA+YXTPHfxytVXX7v245/G4VXgNcnVhSAO8tp8eTU+8y7xJypXrsfh
les/1rgWh8vAVeBVHVeQS1euAxeBVxjXLjAuS64C5y9fOX+Jcw64+IrkrPj/
7IXLc3HmwqUz55HTjHOSi5KXGWcZF+YLfhePeYaXxesDV//cJa3OKueiuHjl
LKs/nkIUrPLyLIjzhFw5r5ya/qTmczqnojijrcsTxHPEIkRNWJtfYid4VZzX
1d8h0U06Fxej0Vr+ltFfrLNxLpa8NNEXJbrx5SU4M8dH8yDh7SqKxmpcYvet
7speYCeFLcOv6WXGNZUL8+TS1Qt34MrGMueVPRuH6OvFf5sScYQ57+GY0xdc
1dDVVtZnjh91ottJq1Wcn5Uojh6JopFfuXaRIx+h1y+9cp09V4lXOVfjEP1M
5uATO+6THLgiiWcLrvKV1zgLtG4LRLFN138MsIqJlVcZr1xlXBf/A9cuA1cY
V5FXxP/EpVeucC5LXgHOnD0X6ugCgpGuYLgzEOq4/MqVBxct/to3v9XZ1Wt1
eD3BznDPIHjucKEbm1uXP/v8nDwTxQrJkypP/17xXAKeuOM8NT/m+Hri2t6V
s5hnhePz7Bws+MTvOrd1mneW6OZ6fJ4svxs887GC6kytwe4luv/xmSMeRPRc
muPx9dQcJHri3SpzlXW3y/0tVPtmvHCr3P4RFs5zd584JyiN6Yo5eG750wjd
3s8iTwHPMJ4AlkueVnjqccaTkuVAg6HpwqXLfYMjfYPDvQPDPf3D167/eOlD
D3/zW9/p7u1z+sKhrv7eoYnhyVlQIE+vWPmb3/zbv/3b/0qSJEmSJEmSfKx5
+tkVr/7kpzT54SwwNjXzk5++/sjf/v23vnN/b9+AP9zdPTA6PDEzdfDY9R+/
tmLlmn/9zW/+9Tf/liRJkiRJkiT5+ALe/IqVq3/6xluH6M28xMk33nr7H77/
T9/57oN9A0Ph7oH+0cmJmSMHj73049deX7km9Ve//tdf/HOSJEmSJEmS5GPM
r//lN6vWpr719nsnT19AzuD/b7/7/j/+8EfffWDRwNBwV9/wyMTMgcMnjp48
89pP31yTmv7LX/3Lhz//dZIkSZIkSZLk48s///pf16VlvPPeB2cvXTsjePfG
h48+9uT9Dy4eHB7pHRobO3AI3P8TL59/7Y231qZl/OKX//L+h79KkiRJkiRJ
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
kiRZKL/rh/fdXdalb3gXBMDVN0EAnFMEwIOLFg8Pjw6OTEzPHjny4ssvnb34
+ptvp6Vnvfvuu+8ll4/b8v+z96bRcRz3ubc+xzcnOTnO8fGJj3Md6eb6zY1f
RzFFiTspx0lsLdZGLRYlUiIWLiIpx7JEWeaV6EW2IsWktZMSKVIEN+zAYAaD
ZQbAAAPMDPZ9B7EvBAiBkmznyyu+Nd3TPdXdVT09PQ2gB3h+5znkoKe7uqp6
+T9VXdNFTuMbAAAA4oHcOeO6046NjTkcjjfeeOPIkSM///nPX3/99ZycHPFH
9PYkbb/CAHRLBmDjpi0lZeWu0orKmmCwoa2lvXdyejZ97zNzc3PXQLIBAwAA
APFC7pzGb7NDQ0O/+tWvfvrTn77wwgsvvvji4cOHXxA4evRof3//4t3eE0Ew
AH8IGwBRkgHYsGmLu6y8yO31+AK1odbG1p6JqaupexIyAPX19ZcuXSotLY13
w8HBwZ6eHmKuTO96kZiamqqoqLDtwZWBAQAAgHgxbgCmp6d/+9vfknBP2v4O
h6O3t5fELNL8/9nPfkYWvvzyy5OTk4t6kzeH2gBciRiA9cQAlJYXur3lvkBN
qLVeMAApe56ZnZ2dM0UoFPq9RLzbtkqMjo6a2/tiQA7oxx9/TIrz3nvvEQ+w
3NnRAwYAAADihdw5Dd5jfT7fc889Rxr+JE7Ry4PBIDEAP/3pT10u1yLc2tXM
zMx0d3fX1NRUCTQ3N4+MjOisLxuALknz1//wgGQACtwVZb5gdagt1No7MTVr
2gCQSjgm8dFHH8W7eWdnZ4uEfnGWDBL9SUFIcc6fP0/+ffvtt+3sAWgDUNHY
n7xaxlsBAGC1YdwAfPjhh8QAZGVlab86c+YMMQBvvvnm1atXLb2vq+nr63M6
nYWFheTfyspKj8dTKEBsAG8TYgDmFv7QxTYAngJ3Zakv5Au1B1v7xqdmd+85
QIowGyeBQOB3EqdPn56YmIg3BeJqVB4g3hSshRSBFIQUp6CggJSOeD/y+a23
3iL1v7wZ46ExAEdvvelv7j1Lx1btknh09vGvMDdnL9fZF/lKRlqHSmQZbwUA
gNUGuXMavMf+/ve/f/7550nTW/uV1+slBuC1114bHR219L6ugITI/Pz84uLi
3t5eeeH4+HhtbS35irdVvAaAxOKr8UD2/rrEqVOnSH7i2lxmenq6ra2tSWJ4
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
hh3mz5Fdzf/8+9+2O0Kk+ne6IiT/H/dqf0Y=
    "], {{0, 728}, {683, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{683, 728},
  PlotRange->{{0, 683}, {0, 728}}]], "Input"],

Cell["Try it yourself.", "Text",
 CellChangeTimes->{{3.6406180454568853`*^9, 3.640618048580064*^9}}],

Cell[BoxData["HeavisidePi"], "Input",
 CellChangeTimes->{{3.6406177721382523`*^9, 3.64061777227826*^9}, {
  3.640617823008162*^9, 3.6406178363749266`*^9}}],

Cell[TextData[{
 "Note, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " does not have reference pages for your personally defined variables and \
functions."
}], "Text",
 CellChangeTimes->{{3.640618069972287*^9, 3.6406181199491463`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.1\tSyntax and Structure", "Section",
 CellChangeTimes->{{3.6406152547492657`*^9, 3.6406152843899612`*^9}}],

Cell[CellGroupData[{

Cell["Basics", "Subsection",
 CellChangeTimes->{{3.640616293455676*^9, 3.6406162943737288`*^9}}],

Cell[TextData[{
 "As you may have already noticed, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " likes to use colored text to denote different meanings. By default, some \
of the formatting is in orange or red coloring. The smaller text is in black. \
When you write your code, you\[CloseCurlyQuote]ll notice black and blue. "
}], "Text",
 CellChangeTimes->{{3.6406153638685074`*^9, 3.640615445638184*^9}, {
  3.6406155135820704`*^9, 3.6406155593216867`*^9}, {3.6584965746842375`*^9, 
  3.658496576060215*^9}}],

Cell[BoxData[{"3.14159", "\[IndentingNewLine]", "\[Pi]", \
"\[IndentingNewLine]", "Black", "\[IndentingNewLine]", 
 RowBox[{"String", "[", "]"}], "\[IndentingNewLine]", "blue"}], "Input",
 CellChangeTimes->{{3.6406155406136165`*^9, 3.6406155907984867`*^9}, {
  3.6406156803736105`*^9, 3.6406156933493524`*^9}, {3.640616250497219*^9, 
  3.640616251090253*^9}}],

Cell[TextData[{
 "Numbers, defined variables, and defined functions appear black. Undefined \
variables will appear blue. Notice all the brackets running along the \
right-hand side of the document. Each of these is  block. Blocks can have \
different styles (discussed later) or, by default, code. We can write a \
simple code and run it by pressing ",
 Cell[BoxData[
  RowBox[{"\[ShiftKey]", "+", "\[EnterKey]"}]], "Input",
  CellChangeTimes->{{3.6406159477869053`*^9, 3.6406159620157194`*^9}}],
 ". Alternatively, you can just hit the ",
 Cell[BoxData[
  FormBox["\[EnterKey]", TraditionalForm]]],
 " key on the number pad."
}], "Text",
 CellChangeTimes->{{3.640615549347116*^9, 3.640615657852322*^9}, {
  3.64061573387367*^9, 3.6406157692056913`*^9}, {3.640615828022055*^9, 
  3.64061601186057*^9}, {3.6452972972729797`*^9, 3.645297299002983*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "+", "2"}]], "Input",
 CellChangeTimes->{{3.6406159729283433`*^9, 3.6406159752894783`*^9}}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.64061597550049*^9, 3.6406160130376377`*^9, 
  3.6406161605080724`*^9}]
}, Open  ]],

Cell["\<\
Using the keyboard \[EnterKey] gives a carriage return. You can use this to \
run multiple commands in a single block. Note, you will have multiple output \
lines for one input block.\
\>", "Text",
 CellChangeTimes->{{3.6406160266274147`*^9, 3.640616090904091*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"2", "+", "2"}], "\[IndentingNewLine]", 
 RowBox[{"4", "+", "4"}]}], "Input",
 CellChangeTimes->{{3.6406160722230225`*^9, 3.6406160737951126`*^9}}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.640616073947121*^9, 3.6406161617001405`*^9}],

Cell[BoxData["8"], "Output",
 CellChangeTimes->{3.640616073947121*^9, 3.640616161702141*^9}]
}, Open  ]],

Cell["\<\
The Mathematica language is written to be intuitive and fairly similar to the \
way we normally write math on paper. For example, it is common to multiply \
using just parentheses.\
\>", "Text",
 CellChangeTimes->{{3.640615828932107*^9, 3.640615831976281*^9}, {
  3.6406161764289827`*^9, 3.640616198545248*^9}, {3.6406162756736593`*^9, 
  3.6406162758136673`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"8", "*", "5"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", "8", ")"}], 
  RowBox[{"(", "5", ")"}]}]}], "Input",
 CellChangeTimes->{{3.6406162046265955`*^9, 3.64061620943087*^9}}],

Cell[BoxData["40"], "Output",
 CellChangeTimes->{3.6406162096718845`*^9}],

Cell[BoxData["40"], "Output",
 CellChangeTimes->{3.6406162096728845`*^9}]
}, Open  ]],

Cell[TextData[{
 "This can be extended to variables as well. Note, you can leave a just space \
between them and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will understand it to be a multiplication."
}], "Text",
 CellChangeTimes->{{3.640616839647917*^9, 3.6406168440351677`*^9}, {
  3.6406168810042825`*^9, 3.640616923900736*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"a", "*", "b"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", "a", ")"}], 
  RowBox[{"(", "b", ")"}]}], "\[IndentingNewLine]", 
 RowBox[{"a", " ", "b"}]}], "Input",
 CellChangeTimes->{{3.640616845268238*^9, 3.6406168763590164`*^9}, {
  3.640616930514114*^9, 3.640616931603176*^9}}],

Cell[BoxData[
 RowBox[{"a", " ", "b"}]], "Output",
 CellChangeTimes->{{3.6406168556178303`*^9, 3.6406168588580155`*^9}, 
   3.6406169320602026`*^9}],

Cell[BoxData[
 RowBox[{"a", " ", "b"}]], "Output",
 CellChangeTimes->{{3.6406168556178303`*^9, 3.6406168588580155`*^9}, 
   3.6406169320622025`*^9}],

Cell[BoxData[
 RowBox[{"a", " ", "b"}]], "Output",
 CellChangeTimes->{{3.6406168556178303`*^9, 3.6406168588580155`*^9}, 
   3.640616932063203*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Defining Variables", "Subsection",
 CellChangeTimes->{{3.6406162988439846`*^9, 3.640616307227464*^9}}],

Cell[CellGroupData[{

Cell["Set", "Subsubsection",
 CellChangeTimes->{{3.640616654315316*^9, 3.6406166546053333`*^9}}],

Cell[TextData[{
 "We can use \[OpenCurlyDoubleQuote]set\[CloseCurlyDoubleQuote] ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", "=", ")"}], TraditionalForm]]],
 " to assign values to different variables."
}], "Text",
 CellChangeTimes->{{3.64061631414986*^9, 3.6406163580673723`*^9}, {
  3.640616756602167*^9, 3.6406167614724455`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", "5"}]], "Input",
 CellChangeTimes->{{3.6406163618995914`*^9, 3.6406163625016255`*^9}}],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.640616362885648*^9}]
}, Open  ]],

Cell[TextData[{
 "After running commands, all instances of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " will have the value 5 until changed."
}], "Text",
 CellChangeTimes->{{3.64061637148514*^9, 3.640616405192067*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox["x", "2"]], "Input",
 CellChangeTimes->{{3.6406163971616077`*^9, 3.640616397708639*^9}}],

Cell[BoxData["25"], "Output",
 CellChangeTimes->{3.640616398672694*^9}]
}, Open  ]],

Cell["\<\
You can change the value of a variable in the middle of a code block.\
\>", "Text",
 CellChangeTimes->{{3.640616408055231*^9, 3.6406164193048744`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 SuperscriptBox["x", "2"], "\[IndentingNewLine]", 
 RowBox[{"x", "=", "6"}], "\[IndentingNewLine]", 
 SuperscriptBox["x", "2"]}], "Input",
 CellChangeTimes->{{3.6406164203859367`*^9, 3.640616429596463*^9}}],

Cell[BoxData["25"], "Output",
 CellChangeTimes->{3.6406164304275107`*^9}],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.6406164304285107`*^9}],

Cell[BoxData["36"], "Output",
 CellChangeTimes->{3.6406164304285107`*^9}]
}, Open  ]],

Cell["\<\
Variables need not have single character names. You can name a variable \
however long you want, as long as it doesn\[CloseCurlyQuote]t already have a \
definition.\
\>", "Text",
 CellChangeTimes->{{3.640616454976915*^9, 3.6406164861957006`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"thisIsMyVariableName", "=", "10"}]], "Input",
 CellChangeTimes->{{3.6406164974013414`*^9, 3.6406165166564426`*^9}}],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{{3.640616508161957*^9, 3.6406165177535057`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox["thisIsMyVariableName", "2"]], "Input",
 CellChangeTimes->{{3.6406165094760323`*^9, 3.6406165108721123`*^9}}],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{{3.640616511284136*^9, 3.6406165186575575`*^9}}]
}, Open  ]],

Cell[TextData[{
 "There are important characters that already have definitions. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will be unhappy if you decide to change these values. These are \
\[OpenCurlyDoubleQuote]protected\[CloseCurlyDoubleQuote] variable names. This \
is also true for predefined functions. "
}], "Text",
 CellChangeTimes->{{3.64061652691603*^9, 3.640616555907688*^9}, {
  3.640616599594187*^9, 3.640616637010327*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"\[Pi]", "+", "0.0"}], "\[IndentingNewLine]", 
 RowBox[{"\[Pi]", "=", "3"}]}], "Input",
 CellChangeTimes->{{3.6406165573087683`*^9, 3.640616576296854*^9}}],

Cell[BoxData["3.141592653589793`"], "Output",
 CellChangeTimes->{{3.64061655891386*^9, 3.6406165766368732`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Set", "::", "wrsym"}], "MessageName"], ":", 
  " ", "\<\"Symbol \[NoBreak]\\!\\(\[Pi]\\)\[NoBreak] is Protected. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/wrsym\\\", \
ButtonNote -> \\\"Set::wrsym\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.640616576680876*^9}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{{3.64061655891386*^9, 3.640616576681876*^9}}]
}, Open  ]],

Cell["\<\
When multiplying variables, be sure to include the space. Otherwise, it will \
be treated as a new variable.\
\>", "Text",
 CellChangeTimes->{{3.640616945325961*^9, 3.640617016266019*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"x", "=", "5"}], "\[IndentingNewLine]", 
 RowBox[{"y", "=", 
  "6"}], "\[IndentingNewLine]", "x", "\[IndentingNewLine]", "y", "\
\[IndentingNewLine]", 
 RowBox[{"x", "*", "y"}], "\[IndentingNewLine]", "xy"}], "Input",
 CellChangeTimes->{{3.640617017790106*^9, 3.6406170308208513`*^9}}],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.640617031035864*^9}],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.6406170310368633`*^9}],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.640617031038864*^9}],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.640617031039864*^9}],

Cell[BoxData["30"], "Output",
 CellChangeTimes->{3.640617031040864*^9}],

Cell[BoxData["xy"], "Output",
 CellChangeTimes->{3.640617031041864*^9}]
}, Open  ]],

Cell["See how \[OpenCurlyDoubleQuote]xy\[CloseCurlyDoubleQuote] is still blue \
after running the code.", "Text",
 CellChangeTimes->{{3.640617037062208*^9, 3.64061707572742*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Suppress Output (",
 StyleBox[";",
  FontWeight->"Bold"],
 ")"
}], "Subsubsection",
 CellChangeTimes->{{3.640617279376068*^9, 3.6406172881275682`*^9}}],

Cell[TextData[{
 "You can supress the output of a line of code by using the semi-colon (",
 StyleBox[";",
  FontWeight->"Bold"],
 ")"
}], "Text",
 CellChangeTimes->{{3.640617296584052*^9, 3.6406173246106553`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"x", "=", "5"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"y", "=", "6"}]}], "Input",
 CellChangeTimes->{{3.64061732748582*^9, 3.640617340926588*^9}, {
  3.6584967039673495`*^9, 3.658496704265561*^9}}],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{{3.640617331286037*^9, 3.640617341273608*^9}, 
   3.658496704944026*^9}],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{{3.640617331286037*^9, 3.640617341273608*^9}, 
   3.6584967049450264`*^9}]
}, Open  ]],

Cell["Notice the middle line did not have any output.", "Text",
 CellChangeTimes->{{3.640617333390157*^9, 3.6406173511461725`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["SetDelayed", "Subsubsection",
 CellChangeTimes->{{3.6406166576875095`*^9, 3.6406166594906125`*^9}, 
   3.640617186065731*^9}],

Cell[TextData[{
 "This is one heavily used aspect of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " that is a little confusing at first. Set Delayed ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    StyleBox[":=",
     FontWeight->"Bold"], ")"}], TraditionalForm]]],
 " defines a varaible to have a particular definition instead of an immediate \
value. To illustrate:"
}], "Text",
 CellChangeTimes->{{3.6406166737934303`*^9, 3.6406167452865195`*^9}, {
  3.6406167812855787`*^9, 3.6406167835827103`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x1", "=", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"y1", "=", 
    RowBox[{"x1", "+", "5"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x1", "=", "6"}], ";"}], "\[IndentingNewLine]", "y1"}], "Input",
 CellChangeTimes->{{3.6406168148654995`*^9, 3.640616830281381*^9}, {
   3.6406171034670067`*^9, 3.640617109245337*^9}, 3.640617258366866*^9, {
   3.640617355905445*^9, 3.640617376501623*^9}}],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{
  3.640616828357271*^9, 3.6406171093753443`*^9, 3.6406172590529056`*^9, {
   3.640617359775666*^9, 3.640617377070656*^9}}]
}, Open  ]],

Cell[TextData[{
 "We define ",
 Cell[BoxData[
  FormBox["y1", TraditionalForm]]],
 " to be the sum of x1 and 5. When we change the value of x1 to 6, y1 does \
not change. Set defines y1 to have whatever values that were instantaneously \
defined. We can use SetDelayed to \[OpenCurlyDoubleQuote]delay\
\[CloseCurlyDoubleQuote] the definition."
}], "Text",
 CellChangeTimes->{{3.640617112389517*^9, 3.6406171835505867`*^9}, {
  3.6406172326433945`*^9, 3.6406172413348923`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x2", "=", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"y2", ":=", 
  RowBox[{"x2", "+", "5"}]}], "\[IndentingNewLine]", 
 RowBox[{"y2", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x2", "=", "6"}], ";"}], "\[IndentingNewLine]", "y2"}], "Input",
 CellChangeTimes->{{3.6406168148654995`*^9, 3.640616830281381*^9}, {
  3.6406171034670067`*^9, 3.640617109245337*^9}, {3.6406172481962843`*^9, 
  3.6406172652912626`*^9}, {3.6406173675871134`*^9, 3.640617380385845*^9}}],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{
  3.640617265617281*^9, {3.640617363416875*^9, 3.640617380615858*^9}}],

Cell[BoxData["11"], "Output",
 CellChangeTimes->{
  3.640617265617281*^9, {3.640617363416875*^9, 3.6406173806168585`*^9}}]
}, Open  ]],

Cell["\<\
Because the definition of y2 was SetDelayed, its value dynamically changes \
with x2. Thus, we can change the value of x2 and the value of y2 will change \
with it. Notice, because y2 is not immediately defined (with Set), there is \
no output. Using SetDelayed automatically suppresses the output.\
\>", "Text",
 CellChangeTimes->{{3.640617391554484*^9, 3.6406174818446484`*^9}, {
  3.6945754089943027`*^9, 3.694575414688262*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.2\tSpecial Characters", "Section",
 CellChangeTimes->{{3.6406183161263666`*^9, 3.6406183205656204`*^9}}],

Cell[CellGroupData[{

Cell["Alias", "Subsection",
 CellChangeTimes->{{3.64062272290742*^9, 3.6406227234874535`*^9}}],

Cell["\<\
You are, of course, free to use any of the characters on your standard \
keyboard. But there are many more to choose from. You are now in a class that \
uses high levels of mathematics and therefore are expected to use Greek \
letters. (The phrase \[OpenCurlyDoubleQuote]It\[CloseCurlyQuote]s all Greek \
to me!\[CloseCurlyDoubleQuote] is no longer a valid excuse for you.)\
\>", "Text",
 CellChangeTimes->{{3.640618323786805*^9, 3.6406183476501694`*^9}, {
  3.64061840080321*^9, 3.640618425619629*^9}, {3.640618556047089*^9, 
  3.640618617864625*^9}}],

Cell["\<\
You can access these characters by using the Alias. Hitting the \[EscapeKey] \
key will bring up a character that looks like three small lines.\
\>", "Text",
 CellChangeTimes->{{3.6406186190956955`*^9, 3.6406186920768695`*^9}, {
  3.640618775180623*^9, 3.6406187916465645`*^9}}],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{{3.640618659307996*^9, 3.640618663109213*^9}, 
   3.6406187848641768`*^9}],

Cell[TextData[{
 "Surround an alias in a pair of these and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will automatically change the expression to the character. For example, \
the alias for the character \[Pi] is \[OpenCurlyDoubleQuote]pi\
\[CloseCurlyDoubleQuote].\n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[AliasDelimiter]", "pi"}], TraditionalForm]]],
 "\[AliasDelimiter] results to"
}], "Text",
 CellChangeTimes->{{3.640618793909694*^9, 3.640618884855896*^9}, 
   3.640620033993623*^9}],

Cell[BoxData["\[Pi]"], "Input",
 CellChangeTimes->{{3.6406188301777687`*^9, 3.640618834314005*^9}, 
   3.640618887269034*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Rule (",
 StyleBox["\[Rule]",
  FontWeight->"Bold"],
 ") and ReplaceAll (",
 StyleBox["/.",
  FontWeight->"Bold"],
 ")"
}], "Subsection",
 CellChangeTimes->{{3.6406201007744427`*^9, 3.6406201523393917`*^9}, {
  3.6406203345248127`*^9, 3.6406203395791016`*^9}}],

Cell[TextData[{
 "The Rule character takes the form of a right-facing arrow. You can get this \
by using the alias ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[AliasDelimiter]", "->"}], TraditionalForm]]],
 "\[AliasDelimiter] (hyphen, greater-than symbol)."
}], "Text",
 CellChangeTimes->{{3.6406201571936693`*^9, 3.6406202453047094`*^9}, {
  3.6406203511887655`*^9, 3.640620353294886*^9}, {3.6406203995305305`*^9, 
  3.6406204543916683`*^9}, {3.640620578641775*^9, 3.640620623728354*^9}}],

Cell[BoxData[
 RowBox[{"lhs", "\[Rule]", "rhs"}]], "Input",
 CellChangeTimes->{{3.6406204619320993`*^9, 3.640620463812207*^9}}],

Cell["\<\
It implies that the left-hand side expression is to be replaced by the \
right-hand side expression.\
\>", "Text",
 CellChangeTimes->{{3.640620454889697*^9, 3.6406204950429935`*^9}}],

Cell[TextData[{
 "ReplaceAll (",
 Cell[BoxData[
  FormBox["/.", TraditionalForm]]],
 ") executes all following Rules."
}], "Text",
 CellChangeTimes->{{3.6406205011023397`*^9, 3.640620526864814*^9}, {
  3.6452973328530626`*^9, 3.6452973488990884`*^9}}],

Cell["\<\
This is a nifty way to temporarily give values to variables at a particular \
line in the code.\
\>", "Text",
 CellChangeTimes->{{3.640620495628027*^9, 3.6406204977111464`*^9}, {
  3.640620532587141*^9, 3.6406205443858156`*^9}, {3.640620904568417*^9, 
  3.640620905533472*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"a", "+", "5"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a", "+", "5"}], "/.", 
  RowBox[{"a", "\[Rule]", "5"}]}]}], "Input",
 CellChangeTimes->{{3.6406202974226904`*^9, 3.6406203254502935`*^9}, {
  3.6406205497791243`*^9, 3.640620551815241*^9}}],

Cell[BoxData[
 RowBox[{"5", "+", "a"}]], "Output",
 CellChangeTimes->{{3.640620304849115*^9, 3.6406203255382986`*^9}, 
   3.640620552487279*^9}],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{{3.640620304849115*^9, 3.6406203255382986`*^9}, 
   3.640620552490279*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Character Formatting", "Subsection",
 CellChangeTimes->{{3.6406227388673325`*^9, 3.6406227422815285`*^9}}],

Cell["\<\
You can format words and characters with subscripts, superscripts, and more \
by using \[ControlKey]+(some key). Below is a table that lists a few commands \
and what they do.\
\>", "Text",
 CellChangeTimes->{{3.6406227463107586`*^9, 3.64062283392877*^9}, {
   3.6406229653972893`*^9, 3.640622974177792*^9}, {3.6406231037922053`*^9, 
   3.640623106005332*^9}, 3.6945744068666687`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"\"\<\[ControlKey]+\>\"", "<>", 
         RowBox[{"ToString", "[", "i", "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "4", ",", "6", ",", "7", ",", "\"\<-\>\""}], 
           "}"}]}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Square Root\>\"", ",", "\"\<Underscript\>\"", ",", 
        "\"\<Superscript/\\nExponent\>\"", ",", "\"\<Overscript\>\"", ",", 
        "\"\<Subscript\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        SqrtBox["var"], ",", " ", 
        UnderscriptBox["var", "\[Placeholder]"], ",", " ", 
        SuperscriptBox["var", "\[Placeholder]"], ",", 
        OverscriptBox["var", "\[Placeholder]"], ",", 
        SubscriptBox["var", "\[Placeholder]"]}], "}"}]}], "}"}], "//", 
    "Transpose"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6406228347158155`*^9, 3.6406228717239323`*^9}, {
  3.6406229044948063`*^9, 3.640623061352778*^9}, {3.6406231156688848`*^9, 
  3.6406232406060305`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"\[ControlKey]+2\"\>", "\<\"Square Root\"\>", 
     SqrtBox["var"]},
    {"\<\"\[ControlKey]+4\"\>", "\<\"Underscript\"\>", 
     UnderscriptBox["var", "\[Placeholder]"]},
    {"\<\"\[ControlKey]+6\"\>", "\<\"Superscript/\\nExponent\"\>", 
     SuperscriptBox["var", "\[Placeholder]"]},
    {"\<\"\[ControlKey]+7\"\>", "\<\"Overscript\"\>", 
     OverscriptBox["var", "\[Placeholder]"]},
    {"\<\"\[ControlKey]+-\"\>", "\<\"Subscript\"\>", 
     SubscriptBox["var", "\[Placeholder]"]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.6406228517517896`*^9, 3.6406228720049477`*^9}, 
   3.640622913907345*^9, {3.640622944093071*^9, 3.6406229568458004`*^9}, 
   3.6406230134940405`*^9, 3.640623062806861*^9, {3.640623126718517*^9, 
   3.64062316296559*^9}, {3.6406232044119606`*^9, 3.640623240820043*^9}}]
}, {2}]],

Cell["\<\
More can be found in the Writing Assistant Pallet (Palletes in the menu bar).\
\>", "Text",
 CellChangeTimes->{{3.640623037906437*^9, 3.6406230683711796`*^9}, {
   3.640623248890505*^9, 3.6406232792102385`*^9}, 3.6945749188387938`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.3\tLists, Arrays, and Matrices", "Section",
 CellChangeTimes->{{3.640618430910932*^9, 3.6406184459467916`*^9}}],

Cell[TextData[{
 "Higher mathematics, especially those involved in Quantum Mechanics requires \
lots of Linear Algebra. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has built-in capabilities to handle it."
}], "Text",
 CellChangeTimes->{{3.6406209883392086`*^9, 3.6406210547970095`*^9}}],

Cell[CellGroupData[{

Cell["Parentheses ()", "Subsection",
 CellChangeTimes->{{3.640621059805296*^9, 3.6406210654506187`*^9}, {
  3.6406211747998734`*^9, 3.6406211755199146`*^9}}],

Cell["\<\
Parentheses act just like parentheses do in normal mathematics. Nothing \
special here.\
\>", "Text",
 CellChangeTimes->{{3.640621068581798*^9, 3.64062108068049*^9}, 
   3.640621121961851*^9, {3.6406211524325943`*^9, 3.640621162299158*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Hard Brackets []", "Subsection",
 CellChangeTimes->{{3.640621165427337*^9, 3.640621172009714*^9}}],

Cell["\<\
Hard Brackets are used for function arguments. This will be discussed later.\
\>", "Text",
 CellChangeTimes->{{3.6406211784350815`*^9, 3.6406211987702446`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Curly Braces {}", "Subsection",
 CellChangeTimes->{{3.640621204655581*^9, 3.6406212076797543`*^9}}],

Cell["\<\
Lists and Arrays are created with these curly braces. A one dimensional list \
is also called an Array. Elements of a list are separated by commas.\
\>", "Text",
 CellChangeTimes->{{3.6406212109519415`*^9, 3.640621261181814*^9}, {
  3.6406214182928004`*^9, 3.6406214236251054`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Input",
 CellChangeTimes->{{3.6406212272188716`*^9, 3.640621228975972*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.6406212295080023`*^9}]
}, Open  ]],

Cell["\<\
You can also create a list of lists. Elements of a list do not necessarily \
have to have the same data type. You can have a list of variables, undefined \
variables, functions, integers, decimals, characters, strings, etc.\
\>", "Text",
 CellChangeTimes->{{3.6406212637779627`*^9, 3.640621344086556*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<this\>\"", ",", "\"\<is\>\"", ",", "a", ",", "List", ",", 
     "\"\<of\>\"", ",", "Length", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<this\>\"", ",", "\"\<is\>\"", ",", "not", ",", "a", ",", "List", 
     ",", "\"\<of\>\"", ",", "Length", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<this\>\"", ",", "\"\<however\>\"", ",", "is"}], "}"}]}], 
  "}"}]], "Input",
 CellChangeTimes->{{3.640621272551464*^9, 3.6406212726034675`*^9}, {
  3.6406213468537145`*^9, 3.6406214553429193`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Matrices", "Subsection",
 CellChangeTimes->{{3.640621614345014*^9, 3.6406216150510545`*^9}}],

Cell["\<\
A list of sublists with each sublist having the same length is a matrix.\
\>", "Text",
 CellChangeTimes->{{3.6406216164201326`*^9, 3.640621648479966*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.640621653663263*^9, 3.6406216718583035`*^9}}],

Cell[TextData[{
 "This, however, can get a little messy to read. So its easier to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s matrix representation. Using \[ControlKey]+, (Control \
and comma) and \[ControlKey]+\[EnterKey], you can create a matrix and then \
populate it iteratively using \[TabKey]. Use \[ControlKey]+, to create \
columns and \[ControlKey]+\[EnterKey] to create rows."
}], "Text",
 CellChangeTimes->{{3.6406216762075524`*^9, 3.6406218318444543`*^9}, {
  3.640621896482151*^9, 3.6406218982852545`*^9}, {3.6452974501652613`*^9, 
  3.645297472576296*^9}}],

Cell[BoxData[{
 RowBox[{"(", GridBox[{
    {"\[Placeholder]", "\[Placeholder]", "\[Placeholder]"}
   }], ")"}], "\[IndentingNewLine]", 
 RowBox[{"(", GridBox[{
    {"\[Placeholder]"},
    {"\[Placeholder]"},
    {"\[Placeholder]"}
   }], ")"}]}], "Input",
 CellChangeTimes->{{3.64062180187574*^9, 3.6406218035168343`*^9}, {
  3.6406218358896856`*^9, 3.6406218447401915`*^9}}],

Cell[BoxData[
 RowBox[{"(", GridBox[{
    {"\[Placeholder]", "\[Placeholder]", "\[Placeholder]"},
    {"\[Placeholder]", "\[Placeholder]", "\[Placeholder]"},
    {"\[Placeholder]", "\[Placeholder]", "\[Placeholder]"}
   }], ")"}]], "Input",
 CellChangeTimes->{{3.640621849276451*^9, 3.640621880163218*^9}}],

Cell[BoxData[
 RowBox[{"(", GridBox[{
    {"1", "2", "3"},
    {"4", "5", "\[Placeholder]"},
    {"\[Placeholder]", "\[Placeholder]", "\[Placeholder]"}
   }], ")"}]], "Input",
 CellChangeTimes->{{3.6406218823573437`*^9, 3.6406218840614405`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(", GridBox[{
    {"1", "2", "3"},
    {"4", "5", "6"},
    {"7", "8", "9"}
   }], ")"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6406218534776917`*^9, 3.6406218850174956`*^9}]
}, Open  ]],

Cell[TextData[{
 "Note, this is just a representation. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " still treats it as a list of lists. We can define variables to hold arrays \
or matrices."
}], "Text",
 CellChangeTimes->{{3.6406218879246616`*^9, 3.6406219267278814`*^9}, {
  3.640622086786036*^9, 3.6406220870540514`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"array1", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"matrix1", "=", 
   RowBox[{"(", GridBox[{
      {"a", "b", "c"},
      {"d", "e", "f"},
      {"g", "h", "i"}
     }], ")"}]}], 
  ";"}], "\[IndentingNewLine]", "array1", "\[IndentingNewLine]", "matrix1"}], \
"Input",
 CellChangeTimes->{{3.640622026235573*^9, 3.6406220734712744`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c"}], "}"}]], "Output",
 CellChangeTimes->{3.6406220736432843`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"g", ",", "h", ",", "i"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6406220736452847`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Array and Matrix Algebra", "Subsection",
 CellChangeTimes->{{3.6406219374024916`*^9, 3.640621952653364*^9}}],

Cell[CellGroupData[{

Cell["Addition and Subtraction", "Subsubsection",
 CellChangeTimes->{{3.6406226093819265`*^9, 3.6406226157612915`*^9}, 
   3.694574466439767*^9}],

Cell[TextData[{
 "Adding to arrays or matrices works just as one expects it to. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will create a new array that has the sum of each component."
}], "Text",
 CellChangeTimes->{{3.6406220942444625`*^9, 3.6406221075362225`*^9}, {
  3.640622137751951*^9, 3.640622156719036*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"array1", "=", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"array2", "=", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"array1", "+", "array2"}]}], "Input",
 CellChangeTimes->{{3.640622109833354*^9, 3.640622161410304*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "+", "d"}], ",", 
   RowBox[{"b", "+", "e"}], ",", 
   RowBox[{"c", "+", "f"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6406221618153276`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"matrix1", "=", 
   RowBox[{"(", GridBox[{
      {"a", "b", "c"},
      {"d", "e", "f"},
      {"g", "h", "i"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"matrix2", "=", 
   RowBox[{"(", GridBox[{
      {"j", "k", "l"},
      {"m", "n", "o"},
      {"p", "q", "r"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"matrix1", "+", "matrix2"}]}], "Input",
 CellChangeTimes->{{3.640622168665719*^9, 3.6406221868857613`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "+", "j"}], ",", 
     RowBox[{"b", "+", "k"}], ",", 
     RowBox[{"c", "+", "l"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"d", "+", "m"}], ",", 
     RowBox[{"e", "+", "n"}], ",", 
     RowBox[{"f", "+", "o"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "+", "p"}], ",", 
     RowBox[{"h", "+", "q"}], ",", 
     RowBox[{"i", "+", "r"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.640622187124775*^9}]
}, Open  ]],

Cell["Subtration works identically.", "Text",
 CellChangeTimes->{{3.64062223458949*^9, 3.6406222382827015`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"array1", "-", "array2"}]], "Input",
 CellChangeTimes->{{3.640622621792637*^9, 3.6406226255518513`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "-", "d"}], ",", 
   RowBox[{"b", "-", "e"}], ",", 
   RowBox[{"c", "-", "f"}]}], "}"}]], "Output",
 CellChangeTimes->{3.640622625634856*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multiplication", "Subsubsection",
 CellChangeTimes->{{3.6406225951681137`*^9, 3.640622601233461*^9}, 
   3.694574474366024*^9}],

Cell["You can multiply arrays and matrices by a scalar.", "Text",
 CellChangeTimes->{{3.640622296855051*^9, 3.6406223051465254`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "array1"}]], "Input",
 CellChangeTimes->{{3.6406223124189415`*^9, 3.6406223179722595`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"2", " ", "a"}], ",", 
   RowBox[{"2", " ", "b"}], ",", 
   RowBox[{"2", " ", "c"}]}], "}"}]], "Output",
 CellChangeTimes->{3.640622318377282*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "matrix1"}]], "Input",
 CellChangeTimes->{{3.6406223188223076`*^9, 3.6406223204013977`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"2", " ", "a"}], ",", 
     RowBox[{"2", " ", "b"}], ",", 
     RowBox[{"2", " ", "c"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"2", " ", "d"}], ",", 
     RowBox[{"2", " ", "e"}], ",", 
     RowBox[{"2", " ", "f"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"2", " ", "g"}], ",", 
     RowBox[{"2", " ", "h"}], ",", 
     RowBox[{"2", " ", "i"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6406223207444177`*^9}]
}, Open  ]],

Cell[TextData[{
 "If you use the same syntax with multiplication, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will do a direct product. The resulting array (or matrix) will have \
components that are the product of the components from the original vectors. \
Mathematically, if \n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"A", "*", "B"}], "\[Equal]", "C"}], TraditionalForm]]],
 ", \nthen the direct product will be\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["C", 
     RowBox[{"i", ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox["A", 
      RowBox[{"i", ",", "j"}]], "*", 
     SubscriptBox["B", 
      RowBox[{"i", ",", "j"}]]}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.6406222475052285`*^9, 3.6406222819681997`*^9}, {
  3.6406223276468124`*^9, 3.6406224037961683`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"array1", "*", "array2"}], "\[IndentingNewLine]", 
 RowBox[{"matrix1", "*", "matrix2"}]}], "Input",
 CellChangeTimes->{{3.640622407464378*^9, 3.640622420509124*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", " ", "d"}], ",", 
   RowBox[{"b", " ", "e"}], ",", 
   RowBox[{"c", " ", "f"}]}], "}"}]], "Output",
 CellChangeTimes->{3.640622420932148*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", " ", "j"}], ",", 
     RowBox[{"b", " ", "k"}], ",", 
     RowBox[{"c", " ", "l"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"d", " ", "m"}], ",", 
     RowBox[{"e", " ", "n"}], ",", 
     RowBox[{"f", " ", "o"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", " ", "p"}], ",", 
     RowBox[{"h", " ", "q"}], ",", 
     RowBox[{"i", " ", "r"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6406224209341483`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dot Product", "Subsubsection",
 CellChangeTimes->{{3.640622644874957*^9, 3.640622647098084*^9}, 
   3.6945744829542027`*^9}],

Cell[TextData[{
 "In order to perform a dot product, use the period key (",
 StyleBox[".",
  FontWeight->"Bold"],
 ")."
}], "Text",
 CellChangeTimes->{{3.640622429500638*^9, 3.6406224491387615`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"array1", ".", "array2"}]], "Input",
 CellChangeTimes->{{3.6406224538520308`*^9, 3.640622456770198*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", " ", "d"}], "+", 
  RowBox[{"b", " ", "e"}], "+", 
  RowBox[{"c", " ", "f"}]}]], "Output",
 CellChangeTimes->{3.6406224568882046`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"matrix1", ".", "matrix2"}]], "Input",
 CellChangeTimes->{{3.640622458074272*^9, 3.640622460604417*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"a", " ", "j"}], "+", 
      RowBox[{"b", " ", "m"}], "+", 
      RowBox[{"c", " ", "p"}]}], ",", 
     RowBox[{
      RowBox[{"a", " ", "k"}], "+", 
      RowBox[{"b", " ", "n"}], "+", 
      RowBox[{"c", " ", "q"}]}], ",", 
     RowBox[{
      RowBox[{"a", " ", "l"}], "+", 
      RowBox[{"b", " ", "o"}], "+", 
      RowBox[{"c", " ", "r"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"d", " ", "j"}], "+", 
      RowBox[{"e", " ", "m"}], "+", 
      RowBox[{"f", " ", "p"}]}], ",", 
     RowBox[{
      RowBox[{"d", " ", "k"}], "+", 
      RowBox[{"e", " ", "n"}], "+", 
      RowBox[{"f", " ", "q"}]}], ",", 
     RowBox[{
      RowBox[{"d", " ", "l"}], "+", 
      RowBox[{"e", " ", "o"}], "+", 
      RowBox[{"f", " ", "r"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"g", " ", "j"}], "+", 
      RowBox[{"h", " ", "m"}], "+", 
      RowBox[{"i", " ", "p"}]}], ",", 
     RowBox[{
      RowBox[{"g", " ", "k"}], "+", 
      RowBox[{"h", " ", "n"}], "+", 
      RowBox[{"i", " ", "q"}]}], ",", 
     RowBox[{
      RowBox[{"g", " ", "l"}], "+", 
      RowBox[{"h", " ", "o"}], "+", 
      RowBox[{"i", " ", "r"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.640622460704423*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"array3", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"array4", "=", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"array3", ".", "array4"}]}], "Input",
 CellChangeTimes->{{3.640622499536644*^9, 3.6406225416860547`*^9}}],

Cell[BoxData["32"], "Output",
 CellChangeTimes->{3.640622541738058*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"matrix3", "=", 
   RowBox[{"(", GridBox[{
      {"1", "2", "3"},
      {"4", "5", "6"},
      {"7", "8", "9"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"matrix4", "=", 
   RowBox[{"(", GridBox[{
      {"10", "11", "12"},
      {"13", "14", "15"},
      {"16", "17", "18"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"matrix3", ".", "matrix4"}]}], "Input",
 CellChangeTimes->{{3.6406225439851866`*^9, 3.640622579570222*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"84", ",", "90", ",", "96"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"201", ",", "216", ",", "231"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"318", ",", "342", ",", "366"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.640622570043677*^9, 3.6406225800102468`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Cross Product", "Subsubsection",
 CellChangeTimes->{{3.6406226515753403`*^9, 3.6406226613649*^9}}],

Cell[TextData[{
 "To cross two vectors, use the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[AliasDelimiter]", "cross"}], TraditionalForm]]],
 "\[AliasDelimiter] alias."
}], "Text",
 CellChangeTimes->{{3.640622662110943*^9, 3.640622682427105*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"array1", "\[Cross]", "array2"}]], "Input",
 CellChangeTimes->{{3.6406226297170897`*^9, 3.64062263671949*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", "c"}], " ", "e"}], "+", 
    RowBox[{"b", " ", "f"}]}], ",", 
   RowBox[{
    RowBox[{"c", " ", "d"}], "-", 
    RowBox[{"a", " ", "f"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "b"}], " ", "d"}], "+", 
    RowBox[{"a", " ", "e"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.640622636876499*^9, 3.6406226845582266`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.4\tNumerics", "Section",
 CellChangeTimes->{{3.6584971419366894`*^9, 3.6584971464839306`*^9}}],

Cell[CellGroupData[{

Cell["Exact Value", "Subsection",
 CellChangeTimes->{{3.658497157773876*^9, 3.6584971627824016`*^9}, {
  3.658497306376889*^9, 3.6584973067901697`*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will treat values exactly, unless told otherwise. For example, dividing \
two integers will result in either the whole integer value or ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will leave it in fraction form (reducing if necessary). "
}], "Text",
 CellChangeTimes->{{3.6584971511091824`*^9, 3.658497249056456*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"1", "/", "2"}], "\[IndentingNewLine]", 
 RowBox[{"1", "/", "3"}], "\[IndentingNewLine]", 
 RowBox[{"15", "/", "60"}]}], "Input",
 CellChangeTimes->{{3.6584972511419287`*^9, 3.6584972807388163`*^9}}],

Cell[BoxData[
 FractionBox["1", "2"]], "Output",
 CellChangeTimes->{{3.658497254530319*^9, 3.6584972812832165`*^9}}],

Cell[BoxData[
 FractionBox["1", "3"]], "Output",
 CellChangeTimes->{{3.658497254530319*^9, 3.658497281285201*^9}}],

Cell[BoxData[
 FractionBox["1", "4"]], "Output",
 CellChangeTimes->{{3.658497254530319*^9, 3.658497281286201*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Approximate Value", "Subsection",
 CellChangeTimes->{{3.6584972956163273`*^9, 3.6584973039612045`*^9}}],

Cell[TextData[{
 "You can tell ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to give an approximate value instead by changing introducing a decimal \
value. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " then will give a decimal value approximation."
}], "Text",
 CellChangeTimes->{{3.6584973163128896`*^9, 3.6584973925375433`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"1", "/", "2.0"}], "\[IndentingNewLine]", 
 RowBox[{"1.0", "/", "2"}], "\[IndentingNewLine]", 
 RowBox[{"1.0", "/", "4.0"}]}], "Input",
 CellChangeTimes->{{3.6584973721461425`*^9, 3.6584973976582546`*^9}, {
  3.658497431399828*^9, 3.6584974446701813`*^9}}],

Cell[BoxData["0.5`"], "Output",
 CellChangeTimes->{{3.658497373404047*^9, 3.6584973978537188`*^9}, 
   3.6584974453106456`*^9}],

Cell[BoxData["0.5`"], "Output",
 CellChangeTimes->{{3.658497373404047*^9, 3.6584973978537188`*^9}, 
   3.6584974453116455`*^9}],

Cell[BoxData["0.25`"], "Output",
 CellChangeTimes->{{3.658497373404047*^9, 3.6584973978537188`*^9}, 
   3.658497445312647*^9}]
}, Open  ]],

Cell["\<\
So far these have been exact decimal representations, but I specifically say \
approximation because not all fractions or numbers can be represented \
exactly: one-third and \[Pi] for example.\
\>", "Text",
 CellChangeTimes->{{3.6584974505843534`*^9, 3.6584974655208797`*^9}, {
  3.6584975221884127`*^9, 3.6584975616657405`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"1.0", "/", "3"}], "\[IndentingNewLine]", 
 RowBox[{"1.0", "*", "\[Pi]"}]}], "Input",
 CellChangeTimes->{{3.6584975637862225`*^9, 3.6584975678610983`*^9}}],

Cell[BoxData["0.3333333333333333`"], "Output",
 CellChangeTimes->{3.6584975683584623`*^9}],

Cell[BoxData["3.141592653589793`"], "Output",
 CellChangeTimes->{3.658497568359463*^9}]
}, Open  ]],

Cell[TextData[{
 "These are numerical values that are close to the exact value. In all \
calculations. Unless you put a decimal value somewhere, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will treat the calculation exactly. This can often bog down the \
calculation performance when you do more complex number crunching. "
}], "Text",
 CellChangeTimes->{{3.658497572292243*^9, 3.6584977044433002`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.5 Expressions and Boolean", "Section",
 CellChangeTimes->{{3.658507196612691*^9, 3.658507208638188*^9}}],

Cell[CellGroupData[{

Cell["Expressions", "Subsection",
 CellChangeTimes->{{3.6585074614171605`*^9, 3.6585074657922487`*^9}}],

Cell[TextData[{
 "We can generate mathematical expressions by using a double equals sign, ==. \
While typing ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will correct the symbol into a one-character shortened version (== vs \
\[Equal])that is interpreted exactly the same way."
}], "Text",
 CellChangeTimes->{{3.658507245339362*^9, 3.6585073045661554`*^9}, {
  3.6585074031250153`*^9, 3.6585074119122295`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "\[Equal]", "1"}]], "Input",
 CellChangeTimes->{{3.6585073473993716`*^9, 3.6585073496779995`*^9}}],

Cell[BoxData[
 RowBox[{"a", "\[Equal]", "1"}]], "Output",
 CellChangeTimes->{3.658507349918149*^9}]
}, Open  ]],

Cell[TextData[{
 "Note how this does not set the value of ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]]],
 " to 1. It is simply an expression indicating that the left side is \
equivalent to the right side. These expressions can be used in various \
functions (discussed in Module 2) for various purposes."
}], "Text",
 CellChangeTimes->{{3.6585073519886093`*^9, 3.658507369197769*^9}, {
  3.6585074198238025`*^9, 3.6585075097402563`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Boolean", "Subsection",
 CellChangeTimes->{{3.658507519795354*^9, 3.6585075219929056`*^9}}],

Cell[TextData[{
 "Under certain circumstances, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can draw conclusions from the expression and give a Boolean value. A \
Boolean is a variable that has a value of either True or False. For example, "
}], "Text",
 CellChangeTimes->{{3.658507525661542*^9, 3.6585075794924817`*^9}, {
  3.6585076935349655`*^9, 3.6585077095492687`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "\[Equal]", "1"}]], "Input",
 CellChangeTimes->{{3.6585075885088453`*^9, 3.658507589009198*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.6585075894605165`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "\[Equal]", "2"}]], "Input",
 CellChangeTimes->{{3.658507628153836*^9, 3.6585076302573185`*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.658507630319351*^9}]
}, Open  ]],

Cell["This can also be done using undefined variables.", "Text",
 CellChangeTimes->{{3.6585075939727173`*^9, 3.658507614452157*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "\[Equal]", "a"}]], "Input",
 CellChangeTimes->{{3.6585076152997637`*^9, 3.658507615674032*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.658507616261452*^9}]
}, Open  ]],

Cell["Booleans allow for flow control in the code. ", "Text",
 CellChangeTimes->{{3.658507723558174*^9, 3.658507739336291*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 2031},
WindowMargins->{{Automatic, 0}, {0, Automatic}},
FrontEndVersion->"11.0 for Linux x86 (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 211, 7, 148, "Title"],
Cell[794, 31, 115, 2, 85, "Chapter"]
}, Open  ]],
Cell[CellGroupData[{
Cell[946, 38, 125, 2, 129, "Title"],
Cell[CellGroupData[{
Cell[1096, 44, 95, 1, 101, "Section"],
Cell[1194, 47, 963, 21, 201, "Text"],
Cell[2160, 70, 638, 13, 163, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2835, 88, 103, 1, 101, "Section"],
Cell[2941, 91, 599, 11, 125, "Text"],
Cell[3543, 104, 171, 3, 49, "Text"],
Cell[3717, 109, 83660, 1376, 743, "Input"],
Cell[87380, 1487, 100, 1, 49, "Text"],
Cell[87483, 1490, 155, 2, 48, "Input"],
Cell[87641, 1494, 244, 7, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87922, 1506, 114, 1, 101, "Section"],
Cell[CellGroupData[{
Cell[88061, 1511, 96, 1, 70, "Subsection"],
Cell[88160, 1514, 519, 10, 125, "Text"],
Cell[88682, 1526, 359, 5, 217, "Input"],
Cell[89044, 1533, 851, 16, 163, "Text"],
Cell[CellGroupData[{
Cell[89920, 1553, 119, 2, 48, "Input"],
Cell[90042, 1557, 120, 2, 48, "Output"]
}, Open  ]],
Cell[90177, 1562, 275, 5, 87, "Text"],
Cell[CellGroupData[{
Cell[90477, 1571, 171, 3, 91, "Input"],
Cell[90651, 1576, 94, 1, 48, "Output"],
Cell[90748, 1579, 92, 1, 48, "Output"]
}, Open  ]],
Cell[90855, 1583, 374, 7, 87, "Text"],
Cell[CellGroupData[{
Cell[91254, 1594, 209, 5, 91, "Input"],
Cell[91466, 1601, 73, 1, 48, "Output"],
Cell[91542, 1604, 73, 1, 48, "Output"]
}, Open  ]],
Cell[91630, 1608, 342, 8, 87, "Text"],
Cell[CellGroupData[{
Cell[91997, 1620, 309, 7, 133, "Input"],
Cell[92309, 1629, 148, 3, 48, "Output"],
Cell[92460, 1634, 148, 3, 48, "Output"],
Cell[92611, 1639, 146, 3, 48, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[92806, 1648, 108, 1, 70, "Subsection"],
Cell[CellGroupData[{
Cell[92939, 1653, 96, 1, 60, "Subsubsection"],
Cell[93038, 1656, 331, 8, 51, "Text"],
Cell[CellGroupData[{
Cell[93394, 1668, 119, 2, 48, "Input"],
Cell[93516, 1672, 70, 1, 48, "Output"]
}, Open  ]],
Cell[93601, 1676, 229, 6, 49, "Text"],
Cell[CellGroupData[{
Cell[93855, 1686, 118, 2, 52, "Input"],
Cell[93976, 1690, 71, 1, 48, "Output"]
}, Open  ]],
Cell[94062, 1694, 161, 3, 49, "Text"],
Cell[CellGroupData[{
Cell[94248, 1701, 221, 4, 140, "Input"],
Cell[94472, 1707, 73, 1, 48, "Output"],
Cell[94548, 1710, 72, 1, 48, "Output"],
Cell[94623, 1713, 73, 1, 48, "Output"]
}, Open  ]],
Cell[94711, 1717, 256, 5, 87, "Text"],
Cell[CellGroupData[{
Cell[94992, 1726, 139, 2, 48, "Input"],
Cell[95134, 1730, 97, 1, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[95268, 1736, 139, 2, 52, "Input"],
Cell[95410, 1740, 98, 1, 48, "Output"]
}, Open  ]],
Cell[95523, 1744, 447, 9, 87, "Text"],
Cell[CellGroupData[{
Cell[95995, 1757, 179, 3, 91, "Input"],
Cell[96177, 1762, 112, 1, 48, "Output"],
Cell[96292, 1765, 417, 8, 36, "Message"],
Cell[96712, 1775, 93, 1, 48, "Output"]
}, Open  ]],
Cell[96820, 1779, 198, 4, 49, "Text"],
Cell[CellGroupData[{
Cell[97043, 1787, 309, 6, 259, "Input"],
Cell[97355, 1795, 70, 1, 48, "Output"],
Cell[97428, 1798, 72, 1, 48, "Output"],
Cell[97503, 1801, 70, 1, 48, "Output"],
Cell[97576, 1804, 70, 1, 48, "Output"],
Cell[97649, 1807, 71, 1, 48, "Output"],
Cell[97723, 1810, 71, 1, 48, "Output"]
}, Open  ]],
Cell[97809, 1814, 178, 2, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[98024, 1821, 169, 6, 60, "Subsubsection"],
Cell[98196, 1829, 213, 6, 49, "Text"],
Cell[CellGroupData[{
Cell[98434, 1839, 286, 6, 133, "Input"],
Cell[98723, 1847, 120, 2, 48, "Output"],
Cell[98846, 1851, 122, 2, 48, "Output"]
}, Open  ]],
Cell[98983, 1856, 131, 1, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[99151, 1862, 131, 2, 60, "Subsubsection"],
Cell[99285, 1866, 512, 14, 89, "Text"],
Cell[CellGroupData[{
Cell[99822, 1884, 495, 12, 217, "Input"],
Cell[100320, 1898, 172, 3, 48, "Output"]
}, Open  ]],
Cell[100507, 1904, 476, 10, 87, "Text"],
Cell[CellGroupData[{
Cell[101008, 1918, 528, 10, 259, "Input"],
Cell[101539, 1930, 120, 2, 48, "Output"],
Cell[101662, 1934, 122, 2, 48, "Output"]
}, Open  ]],
Cell[101799, 1939, 441, 7, 125, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[102301, 1953, 112, 1, 101, "Section"],
Cell[CellGroupData[{
Cell[102438, 1958, 94, 1, 70, "Subsection"],
Cell[102535, 1961, 562, 9, 125, "Text"],
Cell[103100, 1972, 288, 5, 87, "Text"],
Cell[103391, 1979, 137, 2, 48, "Input"],
Cell[103531, 1983, 505, 13, 163, "Text"],
Cell[104039, 1998, 125, 2, 48, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[104201, 2005, 278, 10, 70, "Subsection"],
Cell[104482, 2017, 487, 10, 87, "Text"],
Cell[104972, 2029, 127, 2, 48, "Input"],
Cell[105102, 2033, 192, 4, 49, "Text"],
Cell[105297, 2039, 251, 7, 49, "Text"],
Cell[105551, 2048, 287, 6, 49, "Text"],
Cell[CellGroupData[{
Cell[105863, 2058, 275, 6, 91, "Input"],
Cell[106141, 2066, 144, 3, 48, "Output"],
Cell[106288, 2071, 123, 2, 48, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[106460, 2079, 112, 1, 70, "Subsection"],
Cell[106575, 2082, 394, 7, 87, "Text"],
Cell[CellGroupData[{
Cell[106994, 2093, 1243, 31, 117, "Input"],
Cell[108240, 2126, 1005, 20, 275, "Output"]
}, {2}]],
Cell[109257, 2149, 245, 4, 49, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[109551, 2159, 119, 1, 101, "Section"],
Cell[109673, 2162, 297, 7, 87, "Text"],
Cell[CellGroupData[{
Cell[109995, 2173, 157, 2, 70, "Subsection"],
Cell[110155, 2177, 250, 5, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[110442, 2187, 104, 1, 70, "Subsection"],
Cell[110549, 2190, 170, 3, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[110756, 2198, 105, 1, 70, "Subsection"],
Cell[110864, 2201, 292, 5, 87, "Text"],
Cell[CellGroupData[{
Cell[111181, 2210, 170, 3, 48, "Input"],
Cell[111354, 2215, 147, 3, 48, "Output"]
}, Open  ]],
Cell[111516, 2221, 315, 5, 87, "Text"],
Cell[111834, 2228, 597, 15, 104, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[112468, 2248, 98, 1, 70, "Subsection"],
Cell[112569, 2251, 164, 3, 49, "Text"],
Cell[112736, 2256, 327, 9, 48, "Input"],
Cell[113066, 2267, 604, 11, 125, "Text"],
Cell[113673, 2280, 375, 10, 162, "Input"],
Cell[114051, 2292, 306, 6, 111, "Input"],
Cell[114360, 2300, 245, 6, 111, "Input"],
Cell[CellGroupData[{
Cell[114630, 2310, 123, 5, 111, "Input"],
Cell[114756, 2317, 328, 9, 48, "Output"]
}, Open  ]],
Cell[115099, 2329, 333, 8, 87, "Text"],
Cell[CellGroupData[{
Cell[115457, 2341, 463, 14, 253, "Input"],
Cell[115923, 2357, 127, 3, 48, "Output"],
Cell[116053, 2362, 304, 9, 48, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[116406, 2377, 114, 1, 70, "Subsection"],
Cell[CellGroupData[{
Cell[116545, 2382, 145, 2, 60, "Subsubsection"],
Cell[116693, 2386, 326, 7, 87, "Text"],
Cell[CellGroupData[{
Cell[117044, 2397, 391, 10, 133, "Input"],
Cell[117438, 2409, 199, 6, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117674, 2420, 491, 16, 283, "Input"],
Cell[118168, 2438, 536, 18, 48, "Output"]
}, Open  ]],
Cell[118719, 2459, 112, 1, 49, "Text"],
Cell[CellGroupData[{
Cell[118856, 2464, 127, 2, 48, "Input"],
Cell[118986, 2468, 197, 6, 48, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[119232, 2480, 133, 2, 60, "Subsubsection"],
Cell[119368, 2484, 133, 1, 49, "Text"],
Cell[CellGroupData[{
Cell[119526, 2489, 119, 2, 48, "Input"],
Cell[119648, 2493, 197, 6, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119882, 2504, 120, 2, 48, "Input"],
Cell[120005, 2508, 538, 18, 48, "Output"]
}, Open  ]],
Cell[120558, 2529, 828, 24, 243, "Text"],
Cell[CellGroupData[{
Cell[121411, 2557, 189, 3, 91, "Input"],
Cell[121603, 2562, 197, 6, 48, "Output"],
Cell[121803, 2570, 538, 18, 48, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[122390, 2594, 130, 2, 60, "Subsubsection"],
Cell[122523, 2598, 199, 6, 49, "Text"],
Cell[CellGroupData[{
Cell[122747, 2608, 127, 2, 48, "Input"],
Cell[122877, 2612, 173, 5, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123087, 2622, 127, 2, 48, "Input"],
Cell[123217, 2626, 1355, 45, 91, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124609, 2676, 393, 10, 133, "Input"],
Cell[125005, 2688, 71, 1, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125113, 2694, 500, 16, 279, "Input"],
Cell[125616, 2712, 343, 9, 48, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[126008, 2727, 104, 1, 60, "Subsubsection"],
Cell[126115, 2730, 245, 7, 49, "Text"],
Cell[CellGroupData[{
Cell[126385, 2741, 133, 2, 48, "Input"],
Cell[126521, 2745, 413, 14, 48, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[127007, 2767, 102, 1, 101, "Section"],
Cell[CellGroupData[{
Cell[127134, 2772, 152, 2, 70, "Subsection"],
Cell[127289, 2776, 396, 9, 87, "Text"],
Cell[CellGroupData[{
Cell[127710, 2789, 223, 4, 133, "Input"],
Cell[127936, 2795, 116, 2, 83, "Output"],
Cell[128055, 2799, 114, 2, 83, "Output"],
Cell[128172, 2803, 114, 2, 83, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[128335, 2811, 109, 1, 70, "Subsection"],
Cell[128447, 2814, 349, 10, 87, "Text"],
Cell[CellGroupData[{
Cell[128821, 2828, 280, 5, 133, "Input"],
Cell[129104, 2835, 127, 2, 48, "Output"],
Cell[129234, 2839, 127, 2, 48, "Output"],
Cell[129364, 2843, 126, 2, 48, "Output"]
}, Open  ]],
Cell[129505, 2848, 339, 6, 87, "Text"],
Cell[CellGroupData[{
Cell[129869, 2858, 179, 3, 91, "Input"],
Cell[130051, 2863, 90, 1, 48, "Output"],
Cell[130144, 2866, 87, 1, 48, "Output"]
}, Open  ]],
Cell[130246, 2870, 414, 8, 125, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[130709, 2884, 112, 1, 101, "Section"],
Cell[CellGroupData[{
Cell[130846, 2889, 103, 1, 70, "Subsection"],
Cell[130952, 2892, 420, 9, 87, "Text"],
Cell[CellGroupData[{
Cell[131397, 2905, 126, 2, 48, "Input"],
Cell[131526, 2909, 99, 2, 48, "Output"]
}, Open  ]],
Cell[131640, 2914, 444, 9, 125, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132121, 2928, 97, 1, 70, "Subsection"],
Cell[132221, 2931, 384, 8, 87, "Text"],
Cell[CellGroupData[{
Cell[132630, 2943, 124, 2, 48, "Input"],
Cell[132757, 2947, 75, 1, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132869, 2953, 124, 2, 48, "Input"],
Cell[132996, 2957, 74, 1, 48, "Output"]
}, Open  ]],
Cell[133085, 2961, 132, 1, 49, "Text"],
Cell[CellGroupData[{
Cell[133242, 2966, 124, 2, 48, "Input"],
Cell[133369, 2970, 73, 1, 48, "Output"]
}, Open  ]],
Cell[133457, 2974, 127, 1, 49, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

