(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    206877,       5148]
NotebookOptionsPosition[    193933,       4724]
NotebookOutlinePosition[    194291,       4740]
CellTagsIndexPosition[    194248,       4737]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "How Do I ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "?"
}], "Title",
 CellChangeTimes->{{3.640613383682064*^9, 3.640613409118104*^9}, {
  3.640615305546171*^9, 3.640615310665464*^9}}],

Cell["by Kush Patel", "Chapter",
 CellChangeTimes->{{3.640613414529113*^9, 3.6406134163301153`*^9}},
 FontSize->24]
}, Open  ]],

Cell[CellGroupData[{

Cell["Module 2 - Functions", "Title",
 CellChangeTimes->{{3.6406153015159407`*^9, 3.6406153319286804`*^9}, {
  3.6584970146531963`*^9, 3.6584970185869856`*^9}},
 FontSize->36],

Cell[CellGroupData[{

Cell["2.1\tGeneral Functions\t", "Section",
 CellChangeTimes->{{3.6584970288161993`*^9, 3.6584970918578157`*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has an expansive library of built-in functions that perform various tasks. \
In this module, I will go over some of the ones I use on a regular basis and \
briefly how to use them. Again, using the F1 key will open up the \
documentation, which provides a description on the different ways to use and \
examples of all of the functions. The \[OpenCurlyDoubleQuote]See Also\
\[CloseCurlyDoubleQuote] section at the bottom of each documentation page is \
also a great way to discover new functions. "
}], "Text",
 CellChangeTimes->{{3.6585039808841286`*^9, 3.6585040863285556`*^9}, {
  3.6585042010639086`*^9, 3.6585042264247932`*^9}}],

Cell[CellGroupData[{

Cell["MatrixForm and TableForm", "Subsection",
 CellChangeTimes->{{3.6585039720389*^9, 3.658503976118767*^9}, {
  3.6585040891675596`*^9, 3.6585040905785475`*^9}}],

Cell[TextData[{
 "In Module 1, I introduced lists and matrices (list of lists). ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " explciity outputs them in list form with the curly braces. However, this \
can be difficult to read. With a little bit of formatting, we can represent a \
matrix in matrix form or represent data in a table and even provide table \
headings. "
}], "Text",
 CellChangeTimes->{{3.6585040933765707`*^9, 3.658504175827716*^9}, {
  3.6585042406068025`*^9, 3.6585042426552486`*^9}, {3.6585042836011567`*^9, 
  3.65850432714989*^9}}],

Cell[CellGroupData[{

Cell["MatrixForm", "Subsubsection",
 CellChangeTimes->{{3.658504331439905*^9, 3.6585043335884495`*^9}}],

Cell[TextData[{
 "We\[CloseCurlyQuote]ll first define a matrix. As you can see, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " outputs the data as a list of lists."
}], "Text",
 CellChangeTimes->{{3.6585043495486975`*^9, 3.6585044165725355`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m1", "=", 
  RowBox[{"(", GridBox[{
     {"1", "2", "3"},
     {"4", "5", "6"},
     {"7", "8", "9"}
    }], ")"}]}]], "Input",
 CellChangeTimes->{{3.658504335093483*^9, 3.658504344252947*^9}, 
   3.6586750749280367`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.658504346541562*^9, 3.6586750750751405`*^9}]
}, Open  ]],

Cell[TextData[{
 "Using the MatrixForm function, we can format the data to look a little \
nicer. Notice, the input values for a function are encased in a pair of hard \
brackets, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"[", "  ", "and", " ", "]"}], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{{3.6585044176022463`*^9, 3.6585044316241536`*^9}, {
  3.658669716052169*^9, 3.6586697397399178`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "m1", "]"}]], "Input",
 CellChangeTimes->{{3.6585044324727416`*^9, 3.6585044366236706`*^9}, 
   3.658675078020219*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "3"},
     {"4", "5", "6"},
     {"7", "8", "9"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.658504437159052*^9, {3.658675076166911*^9, 3.6586750781643205`*^9}}]
}, Open  ]],

Cell["\<\
Note, when you have data in MatrixForm (or TableForm) it cannot be readily \
altered. Therefore, it is important to perform necessary calculations before \
formatting the data.\
\>", "Text",
 CellChangeTimes->{{3.6585044440269065`*^9, 3.6585044958884997`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["TableForm", "Subsubsection",
 CellChangeTimes->{{3.6585044987695303`*^9, 3.658504503622954*^9}}],

Cell["\<\
Here, I\[CloseCurlyQuote]ll generate some data that will represent a \
multiplication table.\
\>", "Text",
 CellChangeTimes->{{3.658504535479438*^9, 3.6585045541345997`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"t1", "=", 
  RowBox[{"(", GridBox[{
     {"1", "2", "3", "4", "5"},
     {"2", "4", "6", "8", "10"},
     {"3", "6", "9", "12", "15"},
     {"4", "8", "12", "16", "20"}
    }], ")"}]}]], "Input",
 CellChangeTimes->{{3.6585045174607186`*^9, 3.6585045174827337`*^9}, {
   3.658504563995558*^9, 3.6585046032332487`*^9}, {3.6585047152853265`*^9, 
   3.658504719614382*^9}, 3.65867503974921*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6", ",", "9", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "8", ",", "12", ",", "16", ",", "20"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.6585046034584093`*^9, 3.658504605478835*^9}, 
   3.6585047200146646`*^9, 3.658675039838277*^9}]
}, Open  ]],

Cell["\<\
Using just the TableForm function, we can output formatted data. Note, it \
will not have the parentheses that MatrixForm does.\
\>", "Text",
 CellChangeTimes->{{3.658504611417045*^9, 3.6585046416853857`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", "t1", "]"}]], "Input",
 CellChangeTimes->{{3.6585046429272633`*^9, 3.658504646436739*^9}, 
   3.6586750480180454`*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"1", "2", "3", "4", "5"},
    {"2", "4", "6", "8", "10"},
    {"3", "6", "9", "12", "15"},
    {"4", "8", "12", "16", "20"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.65850464654883*^9, 3.6585047215977826`*^9, {3.6586750425381784`*^9, 
   3.6586750484473495`*^9}}]
}, Open  ]],

Cell["\<\
By using a series of options, we can give more information to the table. Lets \
start with TableHeadings. Simply, you start with the data as the first \
parameter. All subsequent options are then separated by a comma. \
\>", "Text",
 CellChangeTimes->{{3.6585046523679333`*^9, 3.6585046857345*^9}, {
  3.6585047381544685`*^9, 3.658504797622443*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{"t1", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], " ", 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.658504677057349*^9, 3.658504726154998*^9}, 
   3.658675059982489*^9}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], 
      TagBox["1",
       HoldForm], 
      TagBox["2",
       HoldForm], 
      TagBox["3",
       HoldForm], 
      TagBox["4",
       HoldForm], 
      TagBox["5",
       HoldForm]},
     {
      TagBox["1",
       HoldForm], "1", "2", "3", "4", "5"},
     {
      TagBox["2",
       HoldForm], "2", "4", "6", "8", "10"},
     {
      TagBox["3",
       HoldForm], "3", "6", "9", "12", "15"},
     {
      TagBox["4",
       HoldForm], "4", "8", "12", "16", "20"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, TableHeadings -> {{1, 2, 3, 4}, {1, 2, 3, 4, 5}}]]]], "Output",
 CellChangeTimes->{{3.6585047107351274`*^9, 3.6585047262410583`*^9}, 
   3.658504801588234*^9, 3.6586750601255903`*^9}]
}, Open  ]],

Cell["\<\
We can adjust the alignment of the elements of the table too.\
\>", "Text",
 CellChangeTimes->{{3.658504804698428*^9, 3.658504822272829*^9}, {
  3.6585049436554956`*^9, 3.658505000570674*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{"t1", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
     "}"}]}], ",", 
   RowBox[{"TableAlignments", "\[Rule]", "Center"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.658504677057349*^9, 3.658504726154998*^9}, {
   3.6585050051669025`*^9, 3.658505012476076*^9}, 3.6586750641634455`*^9}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], 
      TagBox["1",
       HoldForm], 
      TagBox["2",
       HoldForm], 
      TagBox["3",
       HoldForm], 
      TagBox["4",
       HoldForm], 
      TagBox["5",
       HoldForm]},
     {
      TagBox["1",
       HoldForm], "1", "2", "3", "4", "5"},
     {
      TagBox["2",
       HoldForm], "2", "4", "6", "8", "10"},
     {
      TagBox["3",
       HoldForm], "3", "6", "9", "12", "15"},
     {
      TagBox["4",
       HoldForm], "4", "8", "12", "16", "20"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Center}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, TableHeadings -> {{1, 2, 3, 4}, {1, 2, 3, 4, 5}}, 
    TableAlignments -> Center]]]], "Output",
 CellChangeTimes->{3.6585050128323216`*^9, 3.6586750642444973`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Do and Print", "Subsection",
 CellChangeTimes->{{3.6585050932318697`*^9, 3.6585051039134007`*^9}}],

Cell["\<\
Do is an important function that has existed since the dawn of programming \
and computer science. It provides a way to iteratively perform a series \
commands. Print is also another integral command in programming. This one is \
rather simple; it just outputs the value of the parameter.\
\>", "Text",
 CellChangeTimes->{{3.658505108605708*^9, 3.658505153215207*^9}, {
  3.6585051910629063`*^9, 3.6585052458615837`*^9}, {3.6585053959895334`*^9, 
  3.658505409888336*^9}}],

Cell["Basic usage of Do is as follows:", "Text",
 CellChangeTimes->{{3.6585052346856833`*^9, 3.658505243219711*^9}}],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{"commands", ",", 
   RowBox[{"{", 
    RowBox[{"var", ",", "start", ",", "stop", ",", "step"}], "}"}]}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.6585052486775584`*^9, 3.658505265780628*^9}}],

Cell["\<\
- Command\t- the series of actions you want the code to take
- Var\t\t- the variable that will keep track of the iterations
- Start\t\t- the starting value of Var
- Stop\t\t- when Var reaches or pases Stop, the loop is finished
- Step\t\t- what value Var increments by at each iteration\
\>", "Text",
 CellChangeTimes->{{3.658505271943999*^9, 3.658505387833769*^9}, {
  3.6585054384825206`*^9, 3.6585054593372345`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"Print", "[", "i", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.658505157604288*^9, 3.6585051593074894`*^9}, {
  3.6585054174206443`*^9, 3.658505433442952*^9}}],

Cell[CellGroupData[{

Cell[BoxData["1"], "Print",
 CellChangeTimes->{3.658505433736176*^9}],

Cell[BoxData["2"], "Print",
 CellChangeTimes->{3.658505433736176*^9}],

Cell[BoxData["3"], "Print",
 CellChangeTimes->{3.658505433737172*^9}],

Cell[BoxData["4"], "Print",
 CellChangeTimes->{3.658505433737172*^9}],

Cell[BoxData["5"], "Print",
 CellChangeTimes->{3.6585054337381663`*^9}],

Cell[BoxData["6"], "Print",
 CellChangeTimes->{3.6585054337381663`*^9}],

Cell[BoxData["7"], "Print",
 CellChangeTimes->{3.65850543373916*^9}],

Cell[BoxData["8"], "Print",
 CellChangeTimes->{3.65850543373916*^9}],

Cell[BoxData["9"], "Print",
 CellChangeTimes->{3.6585054337401605`*^9}],

Cell[BoxData["10"], "Print",
 CellChangeTimes->{3.6585054337401605`*^9}]
}, Open  ]]
}, Open  ]],

Cell["Start, Stop, and Step do not need to be integer values.", "Text",
 CellChangeTimes->{{3.658505462643558*^9, 3.6585054677081327`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"Print", "[", "i", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1.0", ",", "2.5", ",", "0.1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.658505157604288*^9, 3.6585051593074894`*^9}, {
  3.6585054174206443`*^9, 3.658505433442952*^9}, {3.6585054773129206`*^9, 
  3.6585054848252287`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["1.`"], "Print",
 CellChangeTimes->{3.658505485021351*^9}],

Cell[BoxData["1.1`"], "Print",
 CellChangeTimes->{3.6585054850223513`*^9}],

Cell[BoxData["1.2`"], "Print",
 CellChangeTimes->{3.6585054850233517`*^9}],

Cell[BoxData["1.3`"], "Print",
 CellChangeTimes->{3.6585054850233517`*^9}],

Cell[BoxData["1.4`"], "Print",
 CellChangeTimes->{3.658505485024353*^9}],

Cell[BoxData["1.5`"], "Print",
 CellChangeTimes->{3.658505485024353*^9}],

Cell[BoxData["1.6`"], "Print",
 CellChangeTimes->{3.6585054850253534`*^9}],

Cell[BoxData["1.7000000000000002`"], "Print",
 CellChangeTimes->{3.6585054850253534`*^9}],

Cell[BoxData["1.8`"], "Print",
 CellChangeTimes->{3.6585054850263557`*^9}],

Cell[BoxData["1.9`"], "Print",
 CellChangeTimes->{3.6585054850273547`*^9}],

Cell[BoxData["2.`"], "Print",
 CellChangeTimes->{3.6585054850273547`*^9}],

Cell[BoxData["2.1`"], "Print",
 CellChangeTimes->{3.6585054850283566`*^9}],

Cell[BoxData["2.2`"], "Print",
 CellChangeTimes->{3.6585054850293593`*^9}],

Cell[BoxData["2.3`"], "Print",
 CellChangeTimes->{3.658505485030359*^9}],

Cell[BoxData["2.4000000000000004`"], "Print",
 CellChangeTimes->{3.658505485031359*^9}],

Cell[BoxData["2.5`"], "Print",
 CellChangeTimes->{3.658505485031359*^9}]
}, Open  ]]
}, Open  ]],

Cell["\<\
Using semicolons after each command, you can perform multiple operations \
inside a single Do loop.\
\>", "Text",
 CellChangeTimes->{{3.6585055138426943`*^9, 3.658505535293846*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"isq", "=", 
     SuperscriptBox["i", "2"]}], ";", 
    RowBox[{"ipt", "=", 
     RowBox[{"i", "+", "0.2"}]}], ";", 
    RowBox[{"Print", "[", 
     RowBox[{"{", 
      RowBox[{"i", ",", "isq", ",", "ipt"}], "}"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "0.0", ",", "1.0", ",", "0.1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6585055364086285`*^9, 3.6585055785573616`*^9}, {
  3.6585057768236394`*^9, 3.6585057981596966`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.`", ",", "0.2`"}], "}"}]], "Print",
 CellChangeTimes->{{3.658505560243437*^9, 3.65850557891061*^9}, 
   3.658505798830171*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.1`", ",", "0.010000000000000002`", ",", "0.30000000000000004`"}],
   "}"}]], "Print",
 CellChangeTimes->{{3.658505560243437*^9, 3.65850557891061*^9}, 
   3.6585057988321714`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.2`", ",", "0.04000000000000001`", ",", "0.4`"}], "}"}]], "Print",
 CellChangeTimes->{{3.658505560243437*^9, 3.65850557891061*^9}, 
   3.6585057988331823`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.30000000000000004`", ",", "0.09000000000000002`", ",", "0.5`"}], 
  "}"}]], "Print",
 CellChangeTimes->{{3.658505560243437*^9, 3.65850557891061*^9}, 
   3.658505798835177*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.4`", ",", "0.16000000000000003`", ",", "0.6000000000000001`"}], 
  "}"}]], "Print",
 CellChangeTimes->{{3.658505560243437*^9, 3.65850557891061*^9}, 
   3.658505798837175*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5`", ",", "0.25`", ",", "0.7`"}], "}"}]], "Print",
 CellChangeTimes->{{3.658505560243437*^9, 3.65850557891061*^9}, 
   3.658505798838176*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.6000000000000001`", ",", "0.3600000000000001`", ",", "0.8`"}], 
  "}"}]], "Print",
 CellChangeTimes->{{3.658505560243437*^9, 3.65850557891061*^9}, 
   3.6585057988401833`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.7000000000000001`", ",", "0.4900000000000001`", ",", 
   "0.9000000000000001`"}], "}"}]], "Print",
 CellChangeTimes->{{3.658505560243437*^9, 3.65850557891061*^9}, 
   3.658505798841178*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.8`", ",", "0.6400000000000001`", ",", "1.`"}], "}"}]], "Print",
 CellChangeTimes->{{3.658505560243437*^9, 3.65850557891061*^9}, 
   3.658505798843179*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9`", ",", "0.81`", ",", "1.1`"}], "}"}]], "Print",
 CellChangeTimes->{{3.658505560243437*^9, 3.65850557891061*^9}, 
   3.65850579884418*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "1.`", ",", "1.2`"}], "}"}]], "Print",
 CellChangeTimes->{{3.658505560243437*^9, 3.65850557891061*^9}, 
   3.658505798846182*^9}]
}, Open  ]]
}, Open  ]],

Cell["\<\
Do loops can be performed with multiple iterators. Each iterator follows the \
same {Var,Start,Stop,Step} format.\
\>", "Text",
 CellChangeTimes->{{3.6585056782040434`*^9, 3.6585056957104344`*^9}, {
  3.658505739548344*^9, 3.6585057491441126`*^9}, {3.694575869233512*^9, 
  3.6945758952787647`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"i", "+", 
     RowBox[{"2", "j"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", "1", ",", "3", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.65850575675449*^9, 3.658505765047329*^9}, {
  3.6585058026788993`*^9, 3.658505835060748*^9}, {3.6945758848173637`*^9, 
  3.694575888081442*^9}}],

Cell[CellGroupData[{

Cell[BoxData["3"], "Print",
 CellChangeTimes->{3.658505835123783*^9}],

Cell[BoxData["5"], "Print",
 CellChangeTimes->{3.658505835123783*^9}],

Cell[BoxData["7"], "Print",
 CellChangeTimes->{3.6585058351247964`*^9}],

Cell[BoxData["4"], "Print",
 CellChangeTimes->{3.6585058351257973`*^9}],

Cell[BoxData["6"], "Print",
 CellChangeTimes->{3.6585058351257973`*^9}],

Cell[BoxData["8"], "Print",
 CellChangeTimes->{3.6585058351257973`*^9}],

Cell[BoxData["5"], "Print",
 CellChangeTimes->{3.6585058351267977`*^9}],

Cell[BoxData["7"], "Print",
 CellChangeTimes->{3.6585058351267977`*^9}],

Cell[BoxData["9"], "Print",
 CellChangeTimes->{3.658505835127798*^9}]
}, Open  ]]
}, Open  ]],

Cell["\<\
You don\[CloseCurlyQuote]t always need to include {var,start,stop,step} in \
the function. Mathematica will assume values if you don\[CloseCurlyQuote]t \
supply them as such:\
\>", "Text",
 CellChangeTimes->{{3.694576160352783*^9, 3.694576225317635*^9}}],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{"commands", ",", 
   RowBox[{"{", 
    RowBox[{"var", ",", "stop"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.694576231829081*^9, 3.6945762519848948`*^9}}],

Cell["\<\
This will assume the starting point is 1 and the step size is also 1.\
\>", "Text",
 CellChangeTimes->{{3.694576324410921*^9, 3.6945763372827168`*^9}}],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{"commands", ",", 
   RowBox[{"{", 
    RowBox[{"var", ",", "start", ",", "stop"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.694576231829081*^9, 3.6945762519848948`*^9}, {
  3.694576300560113*^9, 3.694576301404327*^9}}],

Cell["This will assume just the step size is 1.", "Text",
 CellChangeTimes->{{3.6945763040308437`*^9, 3.694576344614564*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["If", "Subsection",
 CellChangeTimes->{{3.658674691326333*^9, 3.6586747003156652`*^9}}],

Cell["\<\
If provides a way to perform a command under certain conditions.\
\>", "Text",
 CellChangeTimes->{{3.6586747018647585`*^9, 3.6586747407201805`*^9}}],

Cell[BoxData[{
 RowBox[{"If", "[", 
  RowBox[{"test", ",", "doIfTrue"}], "]"}], "\n", 
 RowBox[{"If", "[", 
  RowBox[{"test", ",", "doIfTrue", ",", "doIfFalse"}], "]"}]}], "Code",
 CellChangeTimes->{{3.658674745357452*^9, 3.6586747682566123`*^9}}],

Cell[TextData[{
 "The following code will only print Positive values of ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{{3.6586747744689965`*^9, 3.6586747800729523`*^9}, {
  3.658674810421384*^9, 3.658674815356866*^9}, {3.658674847366442*^9, 
  3.658674877690843*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Do", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"i", ">", "0"}], ",", 
     RowBox[{"Print", "[", "i", "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.658674820951801*^9, 3.658674841094015*^9}, {
  3.6586748816346254`*^9, 3.6586748911843653`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["1"], "Print",
 CellChangeTimes->{3.6586748916316805`*^9}],

Cell[BoxData["2"], "Print",
 CellChangeTimes->{3.6586748916326814`*^9}],

Cell[BoxData["3"], "Print",
 CellChangeTimes->{3.6586748916346827`*^9}],

Cell[BoxData["4"], "Print",
 CellChangeTimes->{3.6586748916356835`*^9}],

Cell[BoxData["5"], "Print",
 CellChangeTimes->{3.658674891637685*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Table", "Subsection",
 CellChangeTimes->{{3.658505863623908*^9, 3.658505871674595*^9}}],

Cell[TextData[{
 "Table is, in my opinion, one of the most useful built in functions in ",
 StyleBox["Mathematica. ",
  FontSlant->"Italic"],
 "It works iteratively, much like a Do loop. However, it retains all of the \
calculations. It is a very useful tool to quickly build lists and matrices. "
}], "Text",
 CellChangeTimes->{{3.6585059813409863`*^9, 3.6585060647358255`*^9}}],

Cell["\<\
For example, we can quickly build a list of integers from 1-20. There is \
another function that does this in a more simplified way. \
I\[CloseCurlyQuote]ll let you find it.\
\>", "Text",
 CellChangeTimes->{{3.6585061526355734`*^9, 3.6585061659179363`*^9}, {
  3.6585062036155396`*^9, 3.6585062141970162`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"i", ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "20", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.658506166629449*^9, 3.6585061716209593`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15",
    ",", "16", ",", "17", ",", "18", ",", "19", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.658506172057279*^9}]
}, Open  ]],

Cell["We can also build a list of squares.", "Text",
 CellChangeTimes->{{3.658506218081803*^9, 3.658506222183654*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   SuperscriptBox["i", "2"], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "20", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6585062240069385`*^9, 3.6585062318805037`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
   "64", ",", "81", ",", "100", ",", "121", ",", "144", ",", "169", ",", 
   "196", ",", "225", ",", "256", ",", "289", ",", "324", ",", "361", ",", 
   "400"}], "}"}]], "Output",
 CellChangeTimes->{3.6585062324198666`*^9}]
}, Open  ]],

Cell["\<\
Also like Do, Table can be used with multiple iterators. This is a very quick \
way to build matrices.\
\>", "Text",
 CellChangeTimes->{{3.6585062429903283`*^9, 3.658506280654909*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"t2", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"i", "*", "j"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "10", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6585062815505486`*^9, 3.658506314247626*^9}, 
   3.6586750918920083`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14", ",", 
     "16", ",", "18", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "3", ",", "6", ",", "9", ",", "12", ",", "15", ",", "18", ",", "21", ",", 
     "24", ",", "27", ",", "30"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4", ",", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",",
      "32", ",", "36", ",", "40"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "35", 
     ",", "40", ",", "45", ",", "50"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6", ",", "12", ",", "18", ",", "24", ",", "30", ",", "36", ",", "42", 
     ",", "48", ",", "54", ",", "60"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "7", ",", "14", ",", "21", ",", "28", ",", "35", ",", "42", ",", "49", 
     ",", "56", ",", "63", ",", "70"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "8", ",", "16", ",", "24", ",", "32", ",", "40", ",", "48", ",", "56", 
     ",", "64", ",", "72", ",", "80"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9", ",", "18", ",", "27", ",", "36", ",", "45", ",", "54", ",", "63", 
     ",", "72", ",", "81", ",", "90"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", 
     ",", "80", ",", "90", ",", "100"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.658506305351336*^9, 3.658506315104218*^9}, 
   3.658674930018771*^9, 3.6586750933970704`*^9}]
}, Open  ]],

Cell["We can clean up how this looks with TableForm.", "Text",
 CellChangeTimes->{{3.6585063208673*^9, 3.6585063309544067`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{"t2", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{"i", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{"i", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}]}], " ", 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6585063319160824`*^9, 3.6585063355226274`*^9}, {
   3.658674920525071*^9, 3.6586749498617744`*^9}, 3.6586750959318595`*^9}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], 
      TagBox["1",
       HoldForm], 
      TagBox["2",
       HoldForm], 
      TagBox["3",
       HoldForm], 
      TagBox["4",
       HoldForm], 
      TagBox["5",
       HoldForm], 
      TagBox["6",
       HoldForm], 
      TagBox["7",
       HoldForm], 
      TagBox["8",
       HoldForm], 
      TagBox["9",
       HoldForm], 
      TagBox["10",
       HoldForm]},
     {
      TagBox["1",
       HoldForm], "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
     {
      TagBox["2",
       HoldForm], "2", "4", "6", "8", "10", "12", "14", "16", "18", "20"},
     {
      TagBox["3",
       HoldForm], "3", "6", "9", "12", "15", "18", "21", "24", "27", "30"},
     {
      TagBox["4",
       HoldForm], "4", "8", "12", "16", "20", "24", "28", "32", "36", "40"},
     {
      TagBox["5",
       HoldForm], "5", "10", "15", "20", "25", "30", "35", "40", "45", "50"},
     {
      TagBox["6",
       HoldForm], "6", "12", "18", "24", "30", "36", "42", "48", "54", "60"},
     {
      TagBox["7",
       HoldForm], "7", "14", "21", "28", "35", "42", "49", "56", "63", "70"},
     {
      TagBox["8",
       HoldForm], "8", "16", "24", "32", "40", "48", "56", "64", "72", "80"},
     {
      TagBox["9",
       HoldForm], "9", "18", "27", "36", "45", "54", "63", "72", "81", "90"},
     {
      TagBox["10",
       HoldForm], "10", "20", "30", "40", "50", "60", "70", "80", "90", "100"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 
     8, 9, 10}}]]]], "Output",
 CellChangeTimes->{
  3.658506335957936*^9, {3.6586749259879265`*^9, 3.6586749500088935`*^9}, 
   3.6586750959678855`*^9}]
}, Open  ]],

Cell["Building a matrix is just as easy.", "Text",
 CellChangeTimes->{{3.658506711644062*^9, 3.6585067176743546`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    SubscriptBox["a", 
     RowBox[{"i", ",", "j"}]], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "5", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "5", ",", "1"}], "}"}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.658506719354503*^9, 3.658506745085661*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      SubscriptBox["a", 
       RowBox[{"1", ",", "1"}]], 
      SubscriptBox["a", 
       RowBox[{"1", ",", "2"}]], 
      SubscriptBox["a", 
       RowBox[{"1", ",", "3"}]], 
      SubscriptBox["a", 
       RowBox[{"1", ",", "4"}]], 
      SubscriptBox["a", 
       RowBox[{"1", ",", "5"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"2", ",", "1"}]], 
      SubscriptBox["a", 
       RowBox[{"2", ",", "2"}]], 
      SubscriptBox["a", 
       RowBox[{"2", ",", "3"}]], 
      SubscriptBox["a", 
       RowBox[{"2", ",", "4"}]], 
      SubscriptBox["a", 
       RowBox[{"2", ",", "5"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"3", ",", "1"}]], 
      SubscriptBox["a", 
       RowBox[{"3", ",", "2"}]], 
      SubscriptBox["a", 
       RowBox[{"3", ",", "3"}]], 
      SubscriptBox["a", 
       RowBox[{"3", ",", "4"}]], 
      SubscriptBox["a", 
       RowBox[{"3", ",", "5"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"4", ",", "1"}]], 
      SubscriptBox["a", 
       RowBox[{"4", ",", "2"}]], 
      SubscriptBox["a", 
       RowBox[{"4", ",", "3"}]], 
      SubscriptBox["a", 
       RowBox[{"4", ",", "4"}]], 
      SubscriptBox["a", 
       RowBox[{"4", ",", "5"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"5", ",", "1"}]], 
      SubscriptBox["a", 
       RowBox[{"5", ",", "2"}]], 
      SubscriptBox["a", 
       RowBox[{"5", ",", "3"}]], 
      SubscriptBox["a", 
       RowBox[{"5", ",", "4"}]], 
      SubscriptBox["a", 
       RowBox[{"5", ",", "5"}]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.658506745437919*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solve and NSolve", "Subsection",
 CellChangeTimes->{{3.6585070969174*^9, 3.658507099312093*^9}}],

Cell[CellGroupData[{

Cell["Solve", "Subsubsection",
 CellChangeTimes->{{3.6585082321825633`*^9, 3.6585082325848327`*^9}}],

Cell["\<\
Suppose you have an expression and you want the solution to a variable. Solve \
will generate the solutions to that expression. The syntax is:\
\>", "Text",
 CellChangeTimes->{{3.6585071227155523`*^9, 3.6585071326665816`*^9}, {
  3.6585078136743507`*^9, 3.658507861782202*^9}}],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{"expr", ",", "vars"}], "]"}]], "Code",
 CellChangeTimes->{{3.658507863381276*^9, 3.658507865723939*^9}}],

Cell["\<\
expr\t- expression you are solving
vars\t- variables you want to solve for\
\>", "Text",
 CellChangeTimes->{{3.6585078727368793`*^9, 3.658507898028782*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], "-", 
     RowBox[{"4", "x"}], "+", "3"}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6585079041170254`*^9, 3.6585079426392107`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6585079270001736`*^9, 3.6585079428043365`*^9}}]
}, Open  ]],

Cell["Solve can also solve a variable in terms of other variables.", "Text",
 CellChangeTimes->{{3.658508943864801*^9, 3.6585089632654996`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    FractionBox["\[Theta]", 
     RowBox[{"1", "-", "\[Theta]"}]], "\[Equal]", 
    RowBox[{"k", " ", "A"}]}], ",", "\[Theta]"}], "]"}]], "Input",
 CellChangeTimes->{{3.658508964971691*^9, 3.6585090067011404`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"\[Theta]", "\[Rule]", 
    FractionBox[
     RowBox[{"A", " ", "k"}], 
     RowBox[{"1", "+", 
      RowBox[{"A", " ", "k"}]}]]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.658509006841239*^9}]
}, Open  ]],

Cell["\<\
For higher order polynomials or complex equations, the exact solution might \
look a little strange. \
\>", "Text",
 CellChangeTimes->{{3.658507998527664*^9, 3.6585080566716967`*^9}, {
  3.6585082117521286`*^9, 3.658508227164006*^9}, {3.6585092070565453`*^9, 
  3.6585092194042487`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "4"], "+", 
     RowBox[{"4", 
      SuperscriptBox["x", "2"]}], "-", 
     RowBox[{"22", "x"}], "+", "8"}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.658508057523287*^9, 3.6585080923378553`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        RowBox[{"2", " ", 
         SqrtBox[
          FractionBox["3", 
           RowBox[{
            RowBox[{"-", "8"}], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"5446", "-", 
               RowBox[{"42", " ", 
                SqrtBox["16017"]}]}], ")"}], 
             RowBox[{"1", "/", "3"}]], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"14", " ", 
               RowBox[{"(", 
                RowBox[{"389", "+", 
                 RowBox[{"3", " ", 
                  SqrtBox["16017"]}]}], ")"}]}], ")"}], 
             RowBox[{"1", "/", "3"}]]}]]]}]]}], "-", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"\[Sqrt]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", 
           FractionBox["16", "3"]}], "-", 
          RowBox[{
           FractionBox["1", "3"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"5446", "-", 
              RowBox[{"42", " ", 
               SqrtBox["16017"]}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}], "-", 
          RowBox[{
           FractionBox["1", "3"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"14", " ", 
              RowBox[{"(", 
               RowBox[{"389", "+", 
                RowBox[{"3", " ", 
                 SqrtBox["16017"]}]}], ")"}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}], "-", 
          RowBox[{"44", " ", 
           SqrtBox[
            FractionBox["3", 
             RowBox[{
              RowBox[{"-", "8"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"5446", "-", 
                 RowBox[{"42", " ", 
                  SqrtBox["16017"]}]}], ")"}], 
               RowBox[{"1", "/", "3"}]], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"14", " ", 
                 RowBox[{"(", 
                  RowBox[{"389", "+", 
                   RowBox[{"3", " ", 
                    SqrtBox["16017"]}]}], ")"}]}], ")"}], 
               RowBox[{"1", "/", "3"}]]}]]]}]}], ")"}]}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        RowBox[{"2", " ", 
         SqrtBox[
          FractionBox["3", 
           RowBox[{
            RowBox[{"-", "8"}], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"5446", "-", 
               RowBox[{"42", " ", 
                SqrtBox["16017"]}]}], ")"}], 
             RowBox[{"1", "/", "3"}]], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"14", " ", 
               RowBox[{"(", 
                RowBox[{"389", "+", 
                 RowBox[{"3", " ", 
                  SqrtBox["16017"]}]}], ")"}]}], ")"}], 
             RowBox[{"1", "/", "3"}]]}]]]}]]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"\[Sqrt]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", 
           FractionBox["16", "3"]}], "-", 
          RowBox[{
           FractionBox["1", "3"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"5446", "-", 
              RowBox[{"42", " ", 
               SqrtBox["16017"]}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}], "-", 
          RowBox[{
           FractionBox["1", "3"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"14", " ", 
              RowBox[{"(", 
               RowBox[{"389", "+", 
                RowBox[{"3", " ", 
                 SqrtBox["16017"]}]}], ")"}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}], "-", 
          RowBox[{"44", " ", 
           SqrtBox[
            FractionBox["3", 
             RowBox[{
              RowBox[{"-", "8"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"5446", "-", 
                 RowBox[{"42", " ", 
                  SqrtBox["16017"]}]}], ")"}], 
               RowBox[{"1", "/", "3"}]], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"14", " ", 
                 RowBox[{"(", 
                  RowBox[{"389", "+", 
                   RowBox[{"3", " ", 
                    SqrtBox["16017"]}]}], ")"}]}], ")"}], 
               RowBox[{"1", "/", "3"}]]}]]]}]}], ")"}]}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox["1", 
       RowBox[{"2", " ", 
        SqrtBox[
         FractionBox["3", 
          RowBox[{
           RowBox[{"-", "8"}], "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"5446", "-", 
              RowBox[{"42", " ", 
               SqrtBox["16017"]}]}], ")"}], 
            RowBox[{"1", "/", "3"}]], "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"14", " ", 
              RowBox[{"(", 
               RowBox[{"389", "+", 
                RowBox[{"3", " ", 
                 SqrtBox["16017"]}]}], ")"}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}]]]}]], "-", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"\[Sqrt]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", 
           FractionBox["16", "3"]}], "-", 
          RowBox[{
           FractionBox["1", "3"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"5446", "-", 
              RowBox[{"42", " ", 
               SqrtBox["16017"]}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}], "-", 
          RowBox[{
           FractionBox["1", "3"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"14", " ", 
              RowBox[{"(", 
               RowBox[{"389", "+", 
                RowBox[{"3", " ", 
                 SqrtBox["16017"]}]}], ")"}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}], "+", 
          RowBox[{"44", " ", 
           SqrtBox[
            FractionBox["3", 
             RowBox[{
              RowBox[{"-", "8"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"5446", "-", 
                 RowBox[{"42", " ", 
                  SqrtBox["16017"]}]}], ")"}], 
               RowBox[{"1", "/", "3"}]], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"14", " ", 
                 RowBox[{"(", 
                  RowBox[{"389", "+", 
                   RowBox[{"3", " ", 
                    SqrtBox["16017"]}]}], ")"}]}], ")"}], 
               RowBox[{"1", "/", "3"}]]}]]]}]}], ")"}]}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox["1", 
       RowBox[{"2", " ", 
        SqrtBox[
         FractionBox["3", 
          RowBox[{
           RowBox[{"-", "8"}], "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"5446", "-", 
              RowBox[{"42", " ", 
               SqrtBox["16017"]}]}], ")"}], 
            RowBox[{"1", "/", "3"}]], "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"14", " ", 
              RowBox[{"(", 
               RowBox[{"389", "+", 
                RowBox[{"3", " ", 
                 SqrtBox["16017"]}]}], ")"}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}]]]}]], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"\[Sqrt]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", 
           FractionBox["16", "3"]}], "-", 
          RowBox[{
           FractionBox["1", "3"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"5446", "-", 
              RowBox[{"42", " ", 
               SqrtBox["16017"]}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}], "-", 
          RowBox[{
           FractionBox["1", "3"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"14", " ", 
              RowBox[{"(", 
               RowBox[{"389", "+", 
                RowBox[{"3", " ", 
                 SqrtBox["16017"]}]}], ")"}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}], "+", 
          RowBox[{"44", " ", 
           SqrtBox[
            FractionBox["3", 
             RowBox[{
              RowBox[{"-", "8"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"5446", "-", 
                 RowBox[{"42", " ", 
                  SqrtBox["16017"]}]}], ")"}], 
               RowBox[{"1", "/", "3"}]], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"14", " ", 
                 RowBox[{"(", 
                  RowBox[{"389", "+", 
                   RowBox[{"3", " ", 
                    SqrtBox["16017"]}]}], ")"}]}], ")"}], 
               RowBox[{"1", "/", "3"}]]}]]]}]}], ")"}]}]}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.658508079863052*^9, 3.6585080927921886`*^9}, 
   3.6585091726092243`*^9}]
}, Open  ]],

Cell["\<\
Using a decimal value will make Solve approximate the answer. It won\
\[CloseCurlyQuote]t be the exact value, but it\[CloseCurlyQuote]ll be \
reasonably close.\
\>", "Text",
 CellChangeTimes->{{3.6585092362321253`*^9, 3.658509271105748*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "4"], "+", 
     RowBox[{"4", 
      SuperscriptBox["x", "2"]}], "-", 
     RowBox[{"22", "x"}], "+", "8"}], "\[Equal]", "0.0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.658508057523287*^9, 3.6585080923378553`*^9}, {
  3.658509282553815*^9, 3.658509282633871*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "1.263289775371284`"}], "-", 
      RowBox[{"2.8195058382142406`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "1.263289775371284`"}], "+", 
      RowBox[{"2.8195058382142406`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.39276633593445365`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.133813214808115`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6585092827219334`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["NSolve", "Subsubsection",
 CellChangeTimes->{{3.6585091518475733`*^9, 3.658509159444935*^9}}],

Cell["\<\
NSolve works similarly to Solve, but will always give an approximate solution\
\>", "Text",
 CellChangeTimes->{{3.658509701106183*^9, 3.658509717302601*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "5"], "-", 
     RowBox[{"2", "x"}], "+", "17"}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6585095880614195`*^9, 3.65850959881901*^9}, {
  3.658509723155731*^9, 3.6585097241724634`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "1.8325135554153524`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "0.48796127686225305`"}], "-", 
      RowBox[{"1.7207007442321953`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "0.48796127686225305`"}], "+", 
      RowBox[{"1.7207007442321953`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"1.4042180545699292`", "\[VeryThinSpace]", "-", 
      RowBox[{"0.963419154203649`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"1.4042180545699292`", "\[VeryThinSpace]", "+", 
      RowBox[{"0.963419154203649`", " ", "\[ImaginaryI]"}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.658509596953693*^9, 3.658509599226307*^9}, 
   3.658509724239496*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Derivative and Integrals", "Subsection",
 CellChangeTimes->{{3.6585102230409384`*^9, 3.6585102385408783`*^9}, {
  3.6585102791435184`*^9, 3.658510281922492*^9}}],

Cell[CellGroupData[{

Cell["D", "Subsubsection",
 CellChangeTimes->{3.6585103488955235`*^9}],

Cell["\<\
The D function will take the derivative of the expression given with respect \
to the indicated variable(s).\
\>", "Text",
 CellChangeTimes->{{3.6585103526622*^9, 3.6585103999646025`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.6585103741233406`*^9, 3.658510378770607*^9}}],

Cell[BoxData[
 RowBox[{"2", " ", "x"}]], "Output",
 CellChangeTimes->{{3.65851037647899*^9, 3.658510406312044*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "3"], 
    SuperscriptBox["y", "2"]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.6585103741233406`*^9, 3.658510378770607*^9}, {
   3.658510417397479*^9, 3.6585104460757303`*^9}, 3.658511127010697*^9}],

Cell[BoxData[
 RowBox[{"3", " ", 
  SuperscriptBox["x", "2"], " ", 
  SuperscriptBox["y", "2"]}]], "Output",
 CellChangeTimes->{{3.6585104234247327`*^9, 3.658510446520032*^9}, 
   3.658511132753751*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "3"], 
    SuperscriptBox["y", "2"]}], ",", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.6585103741233406`*^9, 3.658510378770607*^9}, {
   3.658510417397479*^9, 3.658510449140893*^9}, 3.658510492142764*^9, 
   3.658511131220668*^9}],

Cell[BoxData[
 RowBox[{"2", " ", 
  SuperscriptBox["x", "3"], " ", "y"}]], "Output",
 CellChangeTimes->{{3.6585104234247327`*^9, 3.6585104496432476`*^9}, 
   3.6585104922148247`*^9, 3.6585111332881274`*^9}]
}, Open  ]],

Cell["You can also take multiple derivatives.", "Text",
 CellChangeTimes->{{3.6585104999532757`*^9, 3.6585105052310133`*^9}, {
  3.658511105870781*^9, 3.6585111094743214`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "3"], 
    SuperscriptBox["y", "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6585103741233406`*^9, 3.658510378770607*^9}, {
  3.658510417397479*^9, 3.6585104460757303`*^9}, {3.658511115540609*^9, 
  3.658511136280238*^9}}],

Cell[BoxData[
 RowBox[{"6", " ", "x", " ", 
  SuperscriptBox["y", "2"]}]], "Output",
 CellChangeTimes->{{3.6585111176120644`*^9, 3.6585111365264244`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Integrate", "Subsubsection",
 CellChangeTimes->{{3.6585111685216503`*^9, 3.6585111702168694`*^9}}],

Cell["Integrate integrates.", "Text",
 CellChangeTimes->{{3.6585113984619246`*^9, 3.6585114043861184`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"2", "x", " ", 
    SuperscriptBox["y", "3"]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.658511173854427*^9, 3.6585111778272285`*^9}, {
  3.6585114072541285`*^9, 3.658511427578472*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["x", "2"], " ", 
  SuperscriptBox["y", "3"]}]], "Output",
 CellChangeTimes->{{3.6585114145793123`*^9, 3.658511428338008*^9}}]
}, Open  ]],

Cell["You can also integrate multiple variables.", "Text",
 CellChangeTimes->{{3.6585114530274453`*^9, 3.6585114681140814`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"2", "x", " ", 
    SuperscriptBox["y", "3"]}], ",", "x", ",", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.658511173854427*^9, 3.6585111778272285`*^9}, {
  3.6585114072541285`*^9, 3.658511427578472*^9}, {3.6585114625491514`*^9, 
  3.658511462832351*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y", "4"]}], "4"]], "Output",
 CellChangeTimes->{3.6585114629324317`*^9}]
}, Open  ]],

Cell["You can also do definite integrals.", "Text",
 CellChangeTimes->{{3.6585114921110272`*^9, 3.6585114990859365`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"2", "x", " ", 
    SuperscriptBox["y", "3"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "5"}], "}"}], ",", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.6585114830836434`*^9, 3.658511513580165*^9}}],

Cell[BoxData[
 RowBox[{"6", " ", 
  SuperscriptBox["y", "4"]}]], "Output",
 CellChangeTimes->{3.658511514042509*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"2", "x", " ", 
    SuperscriptBox["y", "3"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "4"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6585114830836434`*^9, 3.6585115292172003`*^9}}],

Cell[BoxData["2214"], "Output",
 CellChangeTimes->{3.6585115301268425`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plot", "Subsection",
 CellChangeTimes->{{3.65851378123608*^9, 3.6585137816313677`*^9}}],

Cell["\<\
Plot is an essential function that graphically draws a function. This \
function is incredibly versitile and has a vast array of options. You can \
generate very presentable graphs with Plot and other related functions. But \
for now, I\[CloseCurlyQuote]ll provide some basics.\
\>", "Text",
 CellChangeTimes->{{3.6585137836587906`*^9, 3.658513836939392*^9}, {
  3.6586743985086994`*^9, 3.658674443768627*^9}}],

Cell["Plot has the following syntax", "Text",
 CellChangeTimes->{{3.6585138573728657`*^9, 3.658513868737831*^9}}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"fxn", ",", 
   RowBox[{"{", 
    RowBox[{"var", ",", "start", ",", "stop"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.658513870066781*^9, 3.658513880200921*^9}}],

Cell["For example, the simple quadratic:", "Text",
 CellChangeTimes->{{3.6585138826366405`*^9, 3.658513895565777*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.658513897256958*^9, 3.6585139048823395`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
+EtC//eHoP//Q/4HU6aTQw==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-5, 5}, {0., 24.999997959183716`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.658513905036465*^9}]
}, Open  ]],

Cell["Plot can also plot a list of functions.", "Text",
 CellChangeTimes->{{3.658668653163863*^9, 3.658668662248275*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], 
       SuperscriptBox["x", "2"]}], "+", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.658513897256958*^9, 3.6585139048823395`*^9}, {
  3.658668668013342*^9, 3.658668698849103*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
+EtC//eHoP//Q/4HU6aTQw==
     "]]}, 
   {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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

     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-5, 5}, {0., 24.999997959183716`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6586686788569937`*^9, 3.6586686990242395`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["PlotRange", "Subsubsection",
 CellChangeTimes->{{3.6586698967266855`*^9, 3.6586698991084023`*^9}}],

Cell["\<\
You can specify the plot window using PlotRange. The syntax is as follows:\
\>", "Text",
 CellChangeTimes->{{3.658668741642316*^9, 3.6586687691407223`*^9}}],

Cell[BoxData[
 RowBox[{"PlotRange", "\[Rule]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["x", "min"], ",", 
      SubscriptBox["x", "max"]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["y", "min"], ",", 
      SubscriptBox["y", "max"]}], "}"}]}], "}"}]}]], "Code",
 CellChangeTimes->{{3.658668771665492*^9, 3.6586687960907283`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], 
       SuperscriptBox["x", "2"]}], "+", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "10"}], ",", "15"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "5"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.658513897256958*^9, 3.6585139048823395`*^9}, {
  3.658668668013342*^9, 3.658668698849103*^9}, {3.6586688035930223`*^9, 
  3.658668832305286*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
8eeix6nmGF1mPc+Dk9CQfac6TI/7/3/7D74VCHE=
     "]]}, 
   {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJw11wk0VlsbAODzfZ8hs4yfSoYGoiJTUtpvJVPmqSJEGXNT0lW4yZDC1SQp
U6auociQCNkyZYjMc9cnmecxKfzn/9f6z1pnnfWss84+++z9vu/eR8Le3cSB
ShBEP3n+95oskDryM4JWRvzvEIDZaeGnr9qpZbpbcsoWBPlhTmG1cPE4pUzL
yUw023AzLNml7O7dtoG1fcSMKOI8IG6U/Lmi4he2bpNiCuLgBKcZyV3uKSvY
L+xQx09fNiil3p+8eWwJ715p2FDjYYWmnOuS7UpL+CJzsU8nCyt8O299Rl56
CZsde7h8Y50FmPHeymHuJax7cmG0booF9HzqY0z7FvHjv2LKMj6zQO/CplP7
vBbxwzeehy3DWGDle2A64/UCPiqia3uDkwUUPt101KLP44s0f9scUWYQ2Cm6
5Qn7PFbVNOReEmSG5dtlDYzfc9hUsTD6KDczFKmxKnsPzGFbTku9wXUmOJ71
hJaZMYcb3n/lu8ZgAtPINwl86nN4gzK093UKE3heGOr5ajeLS7QWngQdYAKL
snv3Zcxm8fVWoR+BMkygKrr3uJfmLPZka1cJ2cEEvzs80nllZ7GOp4ThS0Em
YIskZoNHZ7D2ydVvO1ZpIHNBRcaEawbHtr2KUqukwaWNxPhRiykcn8at3HiO
BmXy1z5QjkxhvvGS6/9Y0EDAXqNvi8QUNhfptA4yokFp5bCI/sQkNjhmuNNY
gwZ8obKROX6TmKnAIHT/XhoUCuSHeadNYL9DoUUrv6nAIlNzg3N1DOdFL7yq
S6KCldXzqF39Y/jAU7Ge03FUyP7b9d3RyjHs51fwZjyKCpYznItX7o/h8K2y
xhLhVMh8a+zeLjmG3W5K/NHiRQUz1OsQf2oUq33WZdMwoEKS2bSJfNwwFmh8
0HJxgwK3w0zvCgcN4yL+e4orqxSwKS8sXncdxtffKN1+uEwBEfnAnQ2qw3jP
WEbflykKPOSgL7u0DeE7DhxJIX0UuFV+7HkyxxAWDIi1GSuigKV8ZL+Q9yB+
qLsRf9aHAqpOq/zr5wdxtUnAn6FeFBCKt9Ue0hrEvDnvD5Vdo0Azh0xOnuAg
/uZ+MlDNjQLaI6UBRjnfsO9yk6SrNQVU4kd3hY4O4GCpwoh8oAAf5xG3NQsG
/kH/dGSNnexPPD3202EGPvRKfCyYlQLcB5bqH4kz8LbXGjZCTOT7Xp87rdfW
j+t+TiRprhGwCY51xK3+iz9UFkROzhAw6cTeBlpfMVVEQ8Kgg4DRvysU23m/
4guRGpZKrQQM5fhGuPT0YafbPOfEmwj499e0yeM/+rBZElMRWx0BTQ9amwcj
enG1oFu/RCkBbwtivwQzujFbsVyTUyoB2X3mclszunGoRGdkRgoBmRSeB2+u
dePMZe2dC4kE/HPK36CLpRv3TIbFRMYS8KzfoWHPvi5cv+nBgthjAnxZ5eo/
3+zAXBshOrq3CDhx+mM1H38r5hoyCV+yJMDkbpLxCUYLbumx8OE/S8D5gsC+
a5kteAIreqqcJp8X1pxv02rBQmduBIeZEpDfWSca5duMzcr27vPQI8AgO21M
5fMX7H7leOABRIAr76WNKMcv2NWqfXuCOgF3r+wT/El8wQXKx6r4jxBkvOdC
sXIj1i9MVmA/RIBCTnEUevEZ2y5FPFBUJEAot/Gktkct3mEoYXJDmrzP98gq
nbMWm8qdiDkoRYChh+lV9tQa3LGuPvNrFwH3FLpiP/d+wu2XSgsidhCwmjuw
YHSyGpf8NV63sZ1sjz+FLbe/Cgd3tbqOiBKgeM1RjN+7CqdIPhVs20aAm+KE
bntWJe4KehlWsoWcn7zFxLP0CrzHf+ZnrRDZHn9BQVFuOb5vkTDbLUiAsOfN
hq365Vhzq8z8tAABRkrrK1/9P+JsjxpBaX4Cglx4Eio7ML50Vr6/g4eAD3ue
1AdzYOyanraXh/TyGP2HNpTiD6M/g/S4CXB2lTRoSC/B55SlLDo4CdC7pPy7
3fc99mfJ9N7NTgDHKNf3yPxC7Ho4QTGUjYC6i8P15tMFeLvooar5TQRo20TF
tNu+wxPDVh4trASw9roHRj7Lx0xfhsJ1SFef1r5k3vwWj10QDKhiIUDD+Kda
+/E8LPzEYbGemQBaY7NkpE8utpML9rAgXa6bwW7+Ngf/6aVXO8REAGhY9bTt
ysbM3HUEP+l1f6egPR+ysN85/4FsGgF/+dDN0vdn4qrT/0abkva+7L2QtjkD
55uFRKVSCVhxkq2QDkzDthadPWdI/2nX9zht8R/cwVS/zE160TLcXtrxJRY5
f3GilkKAh9lRhbTOZCzlnFwYQnpWf4YirZOEqaL3bAxIX9ZKaE4tSsDpt/i+
CpPu8k86bngmHm8LP640TBDQ7sn0zeBwDLbSpl98T7rZydHfYPsz7JQd4faI
dINljbgBJRIfrXqrf5l0rb5Mmf73R/hbsA+rEekwfzqOvh+OjZdGnquQDnLq
W3tudheH864ySZL21U848nyLP47sytHmIz3qWLMs//E6dtHncWAlne2QMGoT
bY/Z3fksKaRL2ODqQxUd9Kd6sRS5AMN9V5BIVXZHWYVsjTTSFi50/nZuX5TH
WNPjJJ1nUKN76VgQCsqPShEhXeTMxOnmE4okDna2yZK2O5bg+M7yIQp1KPl6
nLSDwdFP77wiEAYtbEPaxapPquDJU1RW43XTj7Sbs/e9gpzn6P6aPudL0leu
08cKGmORVH+t1xfSngHvdAonXqDwPyaK1//bXy0Z83NBiag0LbdLgRzfowY3
7/TxJaOSh2KNl0iXmdXkn0tMQcG7FGLTSVfaOQpZl6YiP3PtckVyPjWd8zW/
6qWjzNlTW26TrrnM5GXdm4HSVJd0m0l/9knqtF7JRJQvqioBZLwYBMyx/hv8
Bp0XbZ0dIO2sIb7tTWg2CqPzB2mS8Tau664nJ5KLNAWDlLaT8Snb+PSiOyMX
tQvlGz8i7WZc6vsmNQ8dqArTYiPje/o0V6acSj7Sk5b5wErG/9zFV1zypoVI
cJNs01Eyf/Zz0HXPyL5Huwjz1SHSrjlBwbdpReieZXzXYzLfvq9ZbzTlFSMN
lQc5axxkfD3lnbsqgFFUyFibMJm/gup/7YuexEjtCXfCJOn0uUUlO/syJEcx
FfvES8BwlN3VELWPiIeqphbOR9bT72rj3ePl6NWL2wPWZD25dfDqpmmLCsQo
SdA/L0xAXGjqbmpFBXI6wvjDmU5Aj7zABZmYSuRm/6EuhKxHZn9N9XqfqkbG
urNLvGJkvgslNGx9XYvuhajyHdhDgKNLx4QcvQ4N1BuU3Zch4E4JJ7tGUB36
+0qQ5Lwsmc/2NzXdztWjHoY+rW4/AUfemOASzgZkZH1WpVSJAHpKQFeWShPK
qDKxLzxGQGpD3EihWxOS3mdrcvUEASo/CpfLk5rQj+XQZbmTBJjrzgh0cjej
+zlgVapNwONZK+ON4Wb0tHznUzEjAjjVlesMo1oRv9mX5gVbAkKtpLM+1Lai
odtN2t/tyPrkvfWx7O9WJFVrW9B9gQBqAcWS1a4N/X4l7dPqRNYL+caxUpl2
NFR0IY56hZyPnU5s+0s7UP7aLT1DfwLsT1hOxcx2oLsDdkceBBLQb6ffzLaj
E9UwWna03SHHL17x+dDdThR7wLbbLZRcX+nEnjjjLhSwTaK/O4KAYs7n2pxD
3UhPWNc8iVxfVWX/3ust3INEc7lLD2QQ8E7Hj3dUpwfZONttr35N5nOwQ1dF
Vg+Sl8qpWssh11tCwdnnRi8SmP6ZlVZCfv9i3d1xjq+oK0F+crKFAOXLty5c
FGEgy2iFzXI0CrQlEpaFSgy05pA+nMhCAY/2ACNOIwYS0ah4tIXcf2Qduav+
NpiBSg8ynEU3U2A3x0NhpkUGev+7dIuLGAXoaYn1yY0D6MoaTzhdnQK/ByoV
BwMH0ffujVedvhSIFtSSOfhiEOUtdikz+5P7JZ1a8bCiQfRbwjxS9Q4Frmc3
cCnODaKVPJX27HAKTN/qGAmw+Y6S8uPPjMRTgLF1NEby0BAqlKNediunQKU5
B5P99DAaXxdq7eCiQstm2gkVthFUXjEskMZHhf6GVX/2nSNonsto+ZYwFVZP
jm/knh1BZxVmotQlqCCvUvuLVjWCtIttLdaVqBArdHfhZcwo+qeBrSzcmgqe
ndTBMe1xZLfor/k9lwo7zq5+vJo8hZp1qOJXLtMgjcdmwqtkClnvz5xQ96TB
3uqPArfap1BdSFkMrzcNVBRDnEJZp9Gpl+LplXdooM1F50q+NI2GLlffcIqj
gdtH5TNtijPIRy9tIqqBBr1PVL222s8i2QNVYinkfn7X2jWuW/NzKCnhwkeX
TczwTMY1hYeYR1mhfp838TID+5nzhxO55lGcn++zTGFmmM7Vc6mUnkfSoSLX
NkkxwzvnXVXstvNoVoKhQNNkBs22Dt+o+nl04tyLPs47zOD46tBkdsoCWvk1
1HWFlQXSzm7UDVosofiRCE8fUVbgYWbvCPZfQZruCidl7dnAprRqRiH2F6rW
rFHQHuOAONrTaL/VdXSmvEXo9To3MOo9aoN4KLCzMzM2iL4Zxnt3ckdXUKHm
ttVsIcEPctqGiW5PaPD//7v/AKDhTzw=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-10, 15}, {-2, 5}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6586686788569937`*^9, 3.6586686990242395`*^9}, {
  3.658668815192209*^9, 3.658668832460408*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PlotStyle", "Subsubsection",
 CellChangeTimes->{{3.65866990177024*^9, 3.658669904508176*^9}}],

Cell["\<\
The PlotStyle option allows you to change what the plot looks like. \
Specifying one color changes the color of all functions to that one. You can \
also individually define the colors using a list.\
\>", "Text",
 CellChangeTimes->{{3.658668845746784*^9, 3.658668876656587*^9}, {
  3.658668930169404*^9, 3.6586689789607935`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"x", "+", "3"}], ")"}], "2"], ",", 
     SuperscriptBox["x", "2"], ",", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"x", "-", "3"}], ")"}], "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.658513897256958*^9, 3.6585139048823395`*^9}, {
  3.658668668013342*^9, 3.658668698849103*^9}, {3.6586688035930223`*^9, 
  3.658668832305286*^9}, {3.658668987066504*^9, 3.6586691224690604`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[1, 0, 0], AbsoluteThickness[1.6], Opacity[1.], 
    LineBox[CompressedData["
1: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
     "]]}, 
   {RGBColor[1, 0, 0], AbsoluteThickness[1.6], Opacity[1.], 
    LineBox[CompressedData["
1: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
     "]]}, 
   {RGBColor[1, 0, 0], AbsoluteThickness[1.6], Opacity[1.], 
    LineBox[CompressedData["
1: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
k5bh//+Z/wB1YdM4
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-5, 5}, {0, 2}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.658669071484081*^9, 3.6586691227482567`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"x", "+", "2"}], ")"}], "2"], ",", 
     SuperscriptBox["x", "2"], ",", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"x", "-", "2"}], ")"}], "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Red", ",", "Green", ",", "Blue"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.658513897256958*^9, 3.6585139048823395`*^9}, {
  3.658668668013342*^9, 3.658668698849103*^9}, {3.6586688035930223`*^9, 
  3.658668832305286*^9}, {3.658668987066504*^9, 3.6586691293439116`*^9}, {
  3.658674476710863*^9, 3.6586744811439915`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[1, 0, 0], AbsoluteThickness[1.6], Opacity[1.], 
    LineBox[CompressedData["
1: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
6C33LO06NsiEq22+9IWJ/v8f/Q+Le6Jt
     "]]}, 
   {RGBColor[0, 1, 0], AbsoluteThickness[1.6], Opacity[1.], 
    LineBox[CompressedData["
1:eJw1l/k3FXqgxUldmS5J4rq3K6V0VBRJkU2DEMqYlEKZRUhFVIYIRYkQyRgq
c4Yk38xT6uAcQ8SReTqmk8qQd9966+219tp/wGf/sPdmS2d9q1VsbGz0//y/
2an1a4f8o3nC9n9SLVsVOuGh9p08YexfGVdeAjXXXYIu/52Ebphgmokt4Zu5
mYms1Heiu0btS/+vRawhO6uG/vxOtm9oSpYuWoT2zcZYg24W0Zy/vOrV3kV0
za09ses6i6iVtUza7lrAzwG/DMbrOfLrkpR3356f2FvrYX1cZJaE8a2+VX2N
BaGt//wVwT1LGCKHDtBOszB/50MTY2mG6DQx7BcUWSg5yLnPs2+GeO+x3fNg
cQ6HsyI4Ml/OELnhayc++szBIDI7QfDQDFnijMjPCZ/F1YuDX75aTJOZTU0G
gjXTMP5wL5RiOE1adc5287+chuI/Ow9fV58mLZKGXVtDp7HU5pohID1Ntjbf
VY40ngZXJNt0wMgUAaVl47/NU6BcVKDo800RRsr597TNTDisJMaPGE8S5lH3
dJehMXyQdXvPrjxJ7p8azpQrGIOQ5dHuvzZPkpcNxUwJ/zGUVQ2J6oxPEFdu
T4kgiTEIBktH5t6eIOLF7vpXLUZRLFQQ4pk+Tn406tGqh4fxB6XuBu/CKImm
x10wEh7E2bMxUZK9o+Re7hK1bGwAOfftC1WqRsni4jtvIzIA0yle1pXQUWLX
bRLEbTeAzDd6znSJUWLRyGP3uKwfhuiyij8xQqgWxlrirt+QZMjUl302RFT6
lqR05ntxJ8QgcKP/EElT8lH0y+7F+Yrid7/th4jxDy2OtXa9EJX129qkOESC
w7Malrt78JBHZN6ONkj0TArFn9Z9xa0KtZhknkGiu7luNDKrC6aykb3Cnv3k
jwzWVExBOxRtFtb/Nu8nF3dK2qbdaIdw/AWNweP9ZO262FgO5XY081By8zf0
k22/jeXTK9ugMVzmeyr3Gym34d+V1EaHQvyIZPBIH7G64at0hocGQV5lx2Vj
Brkc5vKxNZuKh/EicbVKDBKUzx3udIOKP/d8b3wkziBV5VoDVmpUCL8+d1qb
1ksOHLhtRkv/jLWqam3PFnpIeNTPwvDlJkzYcNNUj38lsuJ+UlX1DRi5XylH
F/hKzF+Ha4RYN2Aw1+ux3Zdu0so77cOzugE9i0z98Mvd5KpWhOp+tXpQw1qb
+x93kbxi30mlqlq8KYr7HMDoJKIWP9YsTFQhp9tIRuxlJzmyZ6BEP7IKmez8
YdlunSSLvinokkoVXpzw0e34o5McjvV2yQ+vRHSvVdOOXR3kkmify+8jFfDi
lGn86NFGKJW3LcPDCY6cLq8RXN9K1I+8Nbz4vhD6gUl6RxgtJOpNIb3naCHM
i/y63TJbSMnCFO+zpgJ4bVSfpR1vId5rhOP7vr1BQXvDP1FezWRJSPZEyN/5
0M1JH1X4+Jkk7VdMLI/Ohr2Aw0qU9Wfy+U2mPT81C4FXdm34xfaZpHU9TfjG
lfVf3/NU3+37RE5u69YTvfsae3PfReH5RxKSvVBfG5MB4bxPxzRc60neozSB
Hcop2Cv46GwGbz1xyohKbIpNxklXAxfutDpCt1+J/7GchHt7O+I+dtWSuLF9
vV31iVjI65s7dayG7C71HmtYiYfw+hSuvN5qohDQ0Wo//Axybtb/rvesJhHJ
Ek820OLgKDeuRc+qImod/qkhpU/Rk89KPCNSSdx3+Ez9qn+ChfVFRSV5FYQv
1DhhujMSG696NInpVJCFY2KUWWYETsn//vnVp5zUZrvWbZB6DH87/oSqNkKu
tOWZl2WG4f2OiMYAHkIqafp6ZzaFYn5U5IeGahl569E8xxVzH7b2ErpNGaUk
vMhe9/XrIGg77Fuie70lM6v4TL9r+4NnhG8gsqCYeLVeU7UR8kPDpaFGI2YR
0VQ+6Bo86AON81Gx9AuFRCcz1rle8zY4u5z9IqMLiLOActT+bd6oOa3hYNT8
hgilhBmtFb6Jo3q/DtIP55Phc6eeNMtcB8enZonIm3lE2Pe9SMMZd1RoveQ2
epNLatu/7pGMcoPq0bNfaJI5JE9IUYpD+wp++9j473ifRTp/9HPzBl6G900R
w4zdmcRoe9lsW5w9PJ0859LXvSTnM1K1SpWt8NNGulLKL52MLeaVtNVY4ppF
d3g66wXxzt5mUnjdHCzTB5ZS1qmEco9dvTD+HFwNVfamtycTGzdfheBYE0zr
TLFLaSaRHHGqz8igIZyOJzSnlSSQNQ/Htjd766HDJ+nwSZN48tE3We9ejTbo
V1d/01WKJel2PFx+O4+j2cbaR3dTNIml8V4L33UYTaZ14rrskUQr8OSey4+V
UK9D+aAz8IiEXS7u62GXR4iPCHka+oDwFKcvzGlLw9+meznGMJCcTlVf671q
M7x0EpRj/vIhHOqRHbkaghixrpuXLXcnl+6l7jsUsaySY5Uwcv6pJVk9FTO9
LZGuUsql6vJQQRNSR3+XxH9NVgm1V92cts8ZnO1u1TpXmCrGdiLr6X96YU7O
unwxZi3ydeu0HNT8Qev0K4hKEUWJ7Wpex5vBUDB7GOswJgkLtQTrQtOHmHWy
FHUukoWVrkpt4fXH8CiSoTZn74fd2e7tRRFPILtWdtasB3C09bxXlBuD4Jxc
EpR4FFfcRUaLPsVBuG9A6RdTE1d9CzWLx5/jbWTuZe/2kyg9TjE6558IpeEQ
SsguA6joetztFkxGajXPr75SY3wwrCs4l5gCMWsTicoYU1RZWAublaUhcv7V
YcF4C6jbFqh/1c5Av93dCy1sl1DntPq6WddLKKhUZ5wOtsbHm0ntZj8zweS6
UZO7zhG6vjOcPQHZMGAfjw7gd4btUfG/s4Nz0LvTUlvgLxeMaTlry4jmgSZs
JNBy4yqkPz255MzIQ7jhWZr6sWtw1Cvzyk7LB61CSGaT5A0wT/NlyigUgCGb
mM7a5IWZS6/4ZA2K8WCHgHGCty9284homUi/hboW20tWox/sc/0D7nCUIIi/
QDlX8i4Gls1WqPnvUBDouOniYiA6ngjMuAgRxO1e35ohE4oNh7x3PZ0geOMm
9Y9qZxgyZljyFpYf8Ho3u8G/tQ8xFGXhEnSwHJv5Vx08+CAc5gMHxzrHKqD/
6vmdPrMnuLXfZS3TuBK8jNIEHfMoPAtO27aqshL8NsqMy7bR+CIrdJESW4V+
B8v3DUFPYeg92eV5ogatp7Smvws8h4ZwQpPY63oMVx79Oyg6BdZ2beMyIg24
Om213fx4Ku6W8nIf9W+ApLri4XW/UlFh6aHueK4RTMfpF+xWaVDO1ielvE3Y
mp61U+zCS4ik+HZkKVARZp8bIeKUg7SmZ8PFjlRMajZGGXbnQOFH8XxFEhXd
798nLZ/IhZHWlFD7n81wubiT+kTmPw7TZ/VWhprhkCobNMj5BryH9jWcjGrF
i9V0N9ZSEYLPSmW9r2/FsQPi8oIexeD0FAuXXmpFj+Zs++X5YqwqYjfltKCB
d4XS0MN6i5+yn0bLKHSov2WapLGVYmCrDdfusjbEFvaGje74AMsjppOx022g
ySrfH3b5gF4LnWauLe3gET3n6V/yAV/i5WIGA9txTW5IOlanHFQRth3P9Dqg
9HDLgNLNCrzjjdHgHeyE7+jhDC1WFRSl7+/03PgFKUfayverV6NQ87bAiOYX
1PDs+lgZXY2cAKuOyqwv4BjaWliMGrxg22t780YXXCoO9W6IrEU4qyFwjOcr
uMSEAp6ZNWCf062Ll0QZiEndsX5mLxW0RDbTYnkGmi48sd9kT4Ur3fcU7ykG
ItTk/85IpCJLOfDQmwAGBm5yhLata8Y2nocbV7MYCGmcevVovhki6YmNyZ/6
8KtthXqvuRVLfVVy/X79OBa/TDyb2vF0w3HK/uf9kDsRZmYg0AFFzXrxkJJ+
FP+rbxRk0AH3nCY+uZl+3IWDAV9XB5i32oZ9zw9gi+l4kDuzEwyxkViJA4Pw
WpRg1GzrRpURz2pL5hBO/iiKLnRioGUdxxEFrmHwb1JIU41koLdpwYd76zDu
O9/J+/GOgYVjYyt5Z4bREO5BJrj6IKtQv8hRPYwjX5bzZtP6ECccOJcaOwK5
y7psThPfcLV9Vf+oxhi4k/nlJaIGseXMQrlL8iRCdAXZfNzGkc5/fvx66SSG
Xe3MphLHsbOmXOgWfRJ6uqt7/KnjUJALsgnmZMKUskZTcvcENPhE+JIdmKBc
l6tRGp+AY/k+E5rcFOgXD5sRRya6IhSvi1lOI7NK6PbD//a85LIb363ZGQT4
hq5J28xCNMU+hZ9tFkWU33u2qLLAbWKulMg3C/ffMxaF51lg5mnbVUnNIknK
+uPmOBYKbSWruS/MojzwTiOvyHeo09q8ohpnwefi7SonNA/rVwcmclLmwJiK
ulj5z0+kn1lp6Df+Ds/4ky2T7ksQEC99JvZ4Hv//n/4HyJPLpg==
     "]]}, 
   {RGBColor[0, 0, 1], AbsoluteThickness[1.6], Opacity[1.], 
    LineBox[CompressedData["
1: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

     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-5, 5}, {0, 2}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.658669071484081*^9, 3.658669129852272*^9}, {
  3.658674476894005*^9, 3.6586744812640905`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Unknown Values", "Subsubsection",
 CellChangeTimes->{{3.6586699095557575`*^9, 3.6586699127559967`*^9}}],

Cell[TextData[{
 "Plot cannot plot functions with unknown values. In this example, ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 " is undefined. The Clear function removes all values from the variables \
given."
}], "Text",
 CellChangeTimes->{{3.658669914970564*^9, 3.6586699753681674`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "k", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"k", " ", 
    SuperscriptBox["x", "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.658669924263113*^9, 3.658669953780948*^9}}],

Cell[BoxData[
 GraphicsBox[{},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-5, 5}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.658669933402563*^9, 3.6586699550748634`*^9}, 
   3.6586745293650227`*^9}]
}, Open  ]],

Cell[TextData[{
 "But we can apply a value to ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 " and then plot the value."
}], "Text",
 CellChangeTimes->{{3.658669981736677*^9, 3.6586699952772703`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"k", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"k", " ", 
    SuperscriptBox["x", "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6586699983033657`*^9, 3.6586700101157064`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
H1n+3x+C/v8P+R+hf4l+
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-5, 5}, {0., 49.99999591836743}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.658670010966301*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Complex Numbers", "Subsubsection",
 CellChangeTimes->{{3.6586700274659863`*^9, 3.6586700303279657`*^9}, {
  3.694575962598401*^9, 3.694575963867927*^9}}],

Cell[TextData[{
 "Plot also cannot plot complex functions. Note, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Exp", "[", "x", "]"}], " ", "\[Equal]", " ", 
    SuperscriptBox["\[ExponentialE]", "x"]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.6586700189249496`*^9, 3.658670044992319*^9}, {
  3.6586700856050158`*^9, 3.658670099879036*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Theta]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", 
     RowBox[{
      RowBox[{"-", "2"}], "\[Pi]"}], ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6586700690612974`*^9, 3.6586701147415257`*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAASkkOQ/shGcDY/v/////vPxs8Vp9m
JRjAj+J0sw0I7z8bTmMUkxMXwA8kg2gw3es/cu0x6uQTFsBXkTcDnBznP2b1
bbM6GRXAVKc7dxMP4T+IHG+VUQkUwM/P4ixNttI/AdEx2I0LE8D44B3iHgap
P6ikuTOL+BHAQm7b9mjky7/t4K6CjOoQwIUmdnc/vt2/E1XLZGbdD8ARuPL1
nlLlv6cmw/U1uw3Ay5psYHjb6r/pEj5IUL0LwKV4vqPwUO6/adCTgXLJCcBY
m7i6oOTvv0TMc+wWqwfAKGD+9SF377/N4tYYBrEFwKKOzJi3Fe2/sTfEdneM
A8AtVIraGYTov9JdjLvwcQHAzzhFt9hT4r9CPa+Daff+v8lg8hg+0ta/ljta
8/W1+r/l6iSXMDW5v0dvC+YXvfa/sBmv1dQUwz+uH9E7Pm/yvwpPRCNbBNo/
HuWYvuhq7L/jzOhDizDkP5n1mwuAiOS/1yxVHqCi6T///o89QPjXvyNkFgAj
yO0/fdAB4KwDwL9yorn797/vP2KS3ppQkb4/v4YEq6vF7z+YPh4xbZ7YP6HI
hVBZqe0/kwG2Fxg75D/fK39ZqdDpP27qs9Dw0Ow/qgVOFfzg4z8qRyP3VJ/y
P6SD7isoVNk/wWPmApyN9j///HMgH4zEP6IDlave0Po/mPE+BoDhur8mbj3R
i8v+P7GTpCD7Lda/GBuYlBRZAUDEjl3t/AHiv8JABw/hdgNAYt98x0FM6L++
S/PHYnAFQLeOTy81puy/XxhVT2KUB0BzBQb8Gmbvv1LKMxUXlAlA7frYqEnz
778Hqzf0w4kLQMwXNaZ6kO6/Yk2xoe6pDUBkDX8rzQDrvw7Vp43OpQ9Au+D+
72b25b8vDwokFuYQQLqf+hBl/d2/OcvSDUH0EUDekUwbUWrMv+v52ZZG8BJA
XYhRXZzJlj9wCRwHiwEUQJph2+kwP9I/n4ucFqoAFUBtQk6dkWfgPy6lrzLF
+hVA5yZKQdSP5j+Rn/01HwoXQAoWqnazt+s/nAyK2FMHGEAzyhSS5MnuP0pJ
DkP7IRlA2P7/////7z8LG54k
   "], {}],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->
   NCache[{{(-2) Pi, 2 Pi}, {0., 1.}}, {{-6.283185307179586, 
    6.283185307179586}, {0., 1.}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.658670115669181*^9}]
}, Open  ]],

Cell["\<\
However, we can plot the Real and Imaginary parts using Re and Im, \
respectively.\
\>", "Text",
 CellChangeTimes->{{3.6586701183090515`*^9, 3.6586701598383512`*^9}, 
   3.6945759824363737`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Theta]"}], "]"}], "]"}], ",", 
     RowBox[{"Im", "[", 
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Theta]"}], "]"}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", 
     RowBox[{
      RowBox[{"-", "2"}], "\[Pi]"}], ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6586700690612974`*^9, 3.6586701485093555`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
9Uz85hY5LGLy0cWTTsPTESzXfg4vVJoK8IrR8JmanbRPHGYaL7x9JEDDjuRz
2j4Ot1XGbBBfpGId06/uPzjxlBofzQ6cpuKXr0aOL+NwVuWi4QoWFW+LEjHa
z4k/1jiuM7qfiiW/8Fsd5egLqjzupNJOxUZqPU91OPofGnPzpNRR8d+OpiZe
jj83KxNe7SqjYlxgsOfTDEF2xhZrc/Op2E4Zla7h+GteyZuhl0XF3I+HXb2n
CdI3TjpYlkLFMunheum/CdpRebL1SCwVP0/s1fg1QdAaYwGH5kgqdv7acSyT
ECRVmfLvbBAV397dE3yPRRCf8ZnnA8+p+M6EnYjqGEG/K6hKDn5UHJUtnpQ4
TFBthZXef25UHDCr+ORQH0H5RkKNS45UXCn1usymm6CUivSLDy5QMXisd+BE
B0EvKkSevDrGifey+mJ9I0FGFdk1X7ZSsdum3LrVJQRpG108v12Fivdv9zdX
KCBIrUJyOkuJiiPeHdk+jQgSrLjEKBGn4kLN58s0MggqKadb9bIp2OKEA0vy
A0GZhj/H7Qcp+Gnq6brxcIJiyq/6kA4K9hCY04nn9POD8sKPC+UUfLRG+Pu3
ZwTplTszZeIpeL314rTSTYLCLdbGboqm4Oce9+JNrxM00994QT+EgmMvacda
XyEo4d/uLtcnFPw2LuT1GiuCpDdz1dZfoeB7PG312vs59Zid8ox5noKPVf11
cdPl5P/A+cN8pyn4WtifZwG7CPKyLirYZkjBNObnww4bCBoMeJrxUo2CxxVK
49OECIIKui5xayjYoEasc46XoOA4op4vz9lP+OTPVQtsZPzTLG5CmIJr53Ah
nclGGVOMMFOWALZRSfF7W8pGD0989BFNFMCnam+ZTN9lo94+c6D8SQCLoxWP
T3LmtbYTdUEnXAAfSlfjirrKRuMPr7g6PhPApk/jC5o4894ya4t9+VUBnFW6
G3dtYSOVFblGjzcL4GOlv+wvt7JQRW8jQyCFH0c9Kw/KkGYhxSDjTufP/HiR
d1XjSQoLuRgVRfdE8GPaMCWvfYaJ5DO/bfrxjB9/OrGz17ONiS77v9ZzceDH
a8cNN6pHMJGAhplT7zp+XNUmqn2Dc/0E/hXFueF8+PKPKy8HBcfQy737/dUC
+fBz/V9vfGZG0eDfHLNgfz6cWOERvTQwip7ZJHS4evLhM28WtobhUdS+68lv
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
     "]]}, 
   {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
KNIc82PyU+5N8P/v7yL///6u3v8B2fUWUA==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->
   NCache[{{(-2) Pi, 2 Pi}, {-0.999999512971478, 
     0.9999999999999671}}, {{-6.283185307179586, 
    6.283185307179586}, {-0.999999512971478, 0.9999999999999671}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.658670115669181*^9, 3.6586701622050333`*^9}]
}, Open  ]],

Cell["It will skip over the imaginary parts of a function.", "Text",
 CellChangeTimes->{{3.6586745707592344`*^9, 3.658674580325986*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    SqrtBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", "x"}], ")"}], 
      RowBox[{"(", 
       RowBox[{"3", "-", "x"}], ")"}]}]], "+", "1"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "5"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.658674581967144*^9, 3.658674652739089*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVyWdQkwcAh/EIxhPFWJHGUT2wopyIURBFHPxfqAXF0ag0lhVphDRUCoKL
4UDhlOUAUhFFBBsQQcBW1BBoPSTiocg4bIGC4ArEhOSFLLNMaj889/vwLOLE
7462oVAoWz73v9dPcqZ4RKX6CivDojYNUImS0LH1e51DEHdljrS4l0r078hO
dHaOwao2CcPcQyWOBYbQqM7JuFSvnyxqpxIBYiL8o1MW2HuqX3j+RSVqznil
jzsVwRLsUjG3jEq8+bGWrnC6DZa+gVbPpRKpuw5Eyp0aYDJXdS6cmEzYGa61
xTKe4RI106pX2BIJj0/ljiX2wPLYv7FGa0MwBAXd9bX9KO3zcsg3TiIkO3kL
hte9xkj585gbQxSicP7ZhWWR77Dnrg9bmGuFT6KwzrZ9BCfOd39gGs3osm5g
J/SPgOftd6+cNIN7/pH98MgIaKpRV+17M/IrW2NEk0axZHriq/ROM2RDLxcn
eI+CK16uZwvMKN42UTh0cxSdx1e4WbebYXFxS2tIliKje0rA4SIT+H/UMFzP
SXH5Zr4z5YIJboTHKz5fisEC3amMMyawwtatP1gnBbFanXj0gAl1eQGapRIp
plaIi8wbTYi0cHh85ge43GiUpg4Z0dJ7jRnvKkPQ4Le9yfON4HO+12hXy5Cc
wbUX0YzgKmhXjhMypF28yxm3MWKa7ZnhrBAZ6lmvJb5yA5gMXpwgR4Y78XRi
X6MBQxleuf2kDGa74hXZIQYYPV48/UYoh/hdRIR3rh7tTWcPPBPLMSMivu79
ST1KAomZu7rlEOY5lJ1O0MMv4h6LLZPD3naZaxZLj8zMIknSgjHoaQF5T5z0
oA9H29amjcHZk7e4rPYjPHItvnO3KuDYRbuVLtLBM8YcVcNSIDLY2UNeqYNX
gDHbP0qBG6nTmt0KdVhL0f0Te0qBVeWrnrof0mHjYUVc830FnstDVzou08F3
l5zPalGAudJ/hiNdBzA+iORdCnC2nswattHBX/p+Cn1MAYNIF9Q9oMWW8MGS
n79WghLV1zycrUWQz79i60olqiR/zvx0RItt9D4Zf5MSVz0f9XZHarGzq2ft
ox+UKHXrNBSs0SJ48/OO2ReVaBY33po6oAFrUZumsliJczmH1iS0aLDX0jrf
t0qJwJbzSbHVGoQKH3N5T5RgRm9OtyZrEOkusjSZPn9p25eVX2jAsRO67LYj
IeE85DZo1Ng/cj9olE4ifXtO1/Q+Nbilv1+e5UlCceGraPdiNXgn6poqQGJ5
7IPwzuNqxITWvN2wg0STw9LssHA1Yh1vM7g8Eh3N+wLL56gRN1ERbDpCIr/6
uts0tQrxHYKUS+kkpAM9v5S1q3Cw+mbpkjwSlKT1MQsEKiRmlraKSkjYpwl+
mp2swqHokrHv7pAINtx5qQ9S4bB/sYOkgcQaueW0zTwVjjpdXZfylERdjtet
T28mcMxcyJ75N4nWwe0C5W8TSOr/NUPwlsRL+xTT7LAJpDwoqPIZJ1HpfTCU
aRlHakFeV8cnEhse+mW0sMdx1G/W/j4riZqSK3r3eeP4D9hJWvs=
     "]], LineBox[CompressedData["
1:eJwVxXlY02UcAPDhON6N7QfsJzxrqCFBAmqyBw8S4f2mIUMBDTyAIcbpHhJR
8MikBLEp8+F+EEmEKahPmDzJIVccDQg55uRMRNOcgnLuZkOC6o/P81kdmRAY
s4xCoQT85//L6kdG7SgIsvYXjIyuV+Dkt1fP3lyGYOp3EN6XKbB/WJuXxATB
lh9tLSPdlHjVwCxVjhC0Ma7c+Od7JZ7xXdFFZSD4yUVuse83JW5u5WU6WCBY
W97CMFYrcdaWU0HeLAR9nAPtwQ4q7Or4+IWQjcC0cXqr7JwKU4rmb921RSA5
5nc7ulSF+1hrBI9WISjLE3sMP1LhREqKiuaIoMpyxOMiocY1o1yzDC6CmNph
6UmRGgsDw3vvb0QQWqKP/nBHjQ90iXIeb0FQFFzIrpaosf6h3NbSC8EFz3dt
i3NqvDU33zVvF4KQy++CI/kaTKdJtFX+COJkked1iRo8en6mYXAvgmvsyj62
SIOT4328bQ4iOGNxyMy+VoObeYaQwigEfKro7F8MLd6xFJZWkoyAufrm0/Pl
WiwWcd5TUxB45vOllc1avGD9NECQhgCtCCm826/FD9cFcbgiBPHfHY17ZdBi
p1DfB5ICBLnnlM+7vXWYUbPp5dtKBIPqpnGTIR0ejCM81r1HUNzB9js6Modd
dT3i7CkEQp+KzM53czgjNd1UO4tgJsifYq6fwzuvGfc36RBkJ3he8bPR47qO
ecEeYxqIpAPznV/pcZHd+NXEj2mwk79hs1GHHkcPt6jq9tNgWCM+PVZswJZ/
d+fLg2mgn/h2xuWeATdODrkTYTQYE1vRo2sNmGU09UNUJA2+CXQbrpYZcMta
tjmRQAN79+euQ0sGzEk9/knUZRo47KvP5YbP4761q/cxG2lwawrHuC//gL1S
L9RE2NEhZizOpT1uAecmKBsZ43T4VeXkceLJIn6dcnuspNkcmhxLNuBCCkzG
1EdLLjFg55cBLfIyI1DEs8ykEUwI9c3dtK1hGVT49izEriegPZ7edLiaCmMC
181ULQHZs3npPqXGwLn3LO+S1AKelCZb/yk2gbSvE29Jd1tCtiMK9U43hbmF
jzJ211sCO7+KGptqBk6NBYXdDlYQtvzl9OgJBJuiOvZYpVuBRs6LkO2hQWuR
NbtXawV/PNs2zvOig1OrtSiAz4ITweUza2zNwd9kamV/Mwu6ekOdscocFKNv
2rpcSAiS6GzcnjEgoSiDTM8iodY7/eXZB0zoNXKY3ZVDgiSltNO9hgkuRxq6
GXkkXP9ce32ujglvuOOp2VdJsDMR0E61MiG4ExQFN0iYyLmrPyZjwnaVuvfO
PRJWpfG5h6eZYMMLFbZ3knC7MWsv15mApPuKCGEXCcenXvVPryPgCeuSJ6+H
BFOf0u3lrgRceVGl6XlMgmBSPGHvTgAliRk1MESCcdnFQ6QPARM3WvFrOQnf
n1kcVkQT4EM9aFv2lgSLkLqNvwgIKBNM62LGSfDjnU45cpSAw26civcTJLSs
t3/9IomAwUdJK5RKEvpkbrKuCwRwP6PrK9UkBJqg4otCAjLzxAMntSRwYtfw
sYgA33CpSK8noaIjTlydQ8CdtqjYhnkSft4hdkrIJ8DYef6L5AUS+JM7SpwL
CYjIzF7ptUjC5fhw4zdFBDSrPzUsLZFge0p/sFhMwL8abzTB
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 5}, {0, 5}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.658674606494467*^9, 3.6586746529362416`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.2\tCustom Functions", "Section",
 CellChangeTimes->{{3.6584970288161993`*^9, 3.6584970918578157`*^9}, {
  3.6586691611793966`*^9, 3.658669164119467*^9}}],

Cell[CellGroupData[{

Cell["Basics", "Subsection",
 CellChangeTimes->{{3.658669790169469*^9, 3.658669790800926*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " allows you to write and generate your own functions. You can use these \
functions just like any of the above functions. Each parameter needs an \
underscore after it."
}], "Text",
 CellChangeTimes->{{3.658669165814659*^9, 3.6586692410387383`*^9}, 
   3.658669487006538*^9, {3.658669545506857*^9, 3.6586695495956907`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"F", "[", "x_", "]"}], ":=", 
  SuperscriptBox["x", "2"]}]], "Input",
 CellChangeTimes->{{3.658669242044464*^9, 3.658669244797402*^9}}],

Cell[TextData[{
 "We can now get values of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "[", "x", "]"}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.658669249887995*^9, 3.65866926316637*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"t3", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"F", "[", "x", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "2."}], ",", "2.", ",", "0.25"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{"t3", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<x\>\"", ",", "\"\<F[x]\>\""}], "}"}]}], "}"}]}], ",", 
   RowBox[{"TableAlignments", "\[Rule]", "\"\<.\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6586692739329643`*^9, 3.658669402757064*^9}, {
  3.6586694362266827`*^9, 3.6586694650170174`*^9}, {3.658675126900715*^9, 
  3.65867512907625*^9}}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\<\"x\"\>",
       HoldForm], 
      TagBox["\<\"F[x]\"\>",
       HoldForm]},
     {
      RowBox[{"-", "2.`"}], "4.`"},
     {
      RowBox[{"-", "1.75`"}], "3.0625`"},
     {
      RowBox[{"-", "1.5`"}], "2.25`"},
     {
      RowBox[{"-", "1.25`"}], "1.5625`"},
     {
      RowBox[{"-", "1.`"}], "1.`"},
     {
      RowBox[{"-", "0.75`"}], "0.5625`"},
     {
      RowBox[{"-", "0.5`"}], "0.25`"},
     {
      RowBox[{"-", "0.25`"}], "0.0625`"},
     {"0.`", "0.`"},
     {"0.25`", "0.0625`"},
     {"0.5`", "0.25`"},
     {"0.75`", "0.5625`"},
     {"1.`", "1.`"},
     {"1.25`", "1.5625`"},
     {"1.5`", "2.25`"},
     {"1.75`", "3.0625`"},
     {"2.`", "4.`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{"."}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, TableHeadings -> {None, {"x", "F[x]"}}, TableAlignments -> 
    "."]]]], "Output",
 CellChangeTimes->{
  3.6586694030032473`*^9, {3.658669436867135*^9, 3.6586694653232317`*^9}, 
   3.6586751298207755`*^9}]
}, Open  ]],

Cell["You can also plot this function.", "Text",
 CellChangeTimes->{{3.658669479212021*^9, 3.6586694806390357`*^9}, {
  3.6586695189050837`*^9, 3.658669523685411*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"F", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6586695248852615`*^9, 3.6586695309645414`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
+EtC//eHoP//Q/4HU6aTQw==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-5, 5}, {0., 24.999997959183716`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6586695311736903`*^9}]
}, Open  ]],

Cell[TextData[{
 "Function names can be longer than one character and can include numbers, \
but they cannot overwrite the name of a built-in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function."
}], "Text",
 CellChangeTimes->{{3.658669552544825*^9, 3.65866959689108*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ThisIsMyFunctionName", "[", "x_", "]"}], ":=", 
  SuperscriptBox["x", "2"]}]], "Input",
 CellChangeTimes->{{3.6586696213373327`*^9, 3.6586696306028748`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cos", "[", "x_", "]"}], ":=", 
  SuperscriptBox["x", "2"]}]], "Input",
 CellChangeTimes->{{3.6586696057483234`*^9, 3.658669615563246*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"SetDelayed", "::", "write"}], "MessageName"], ":", 
  " ", "\<\"Tag \[NoBreak]\\!\\(Cos\\)\[NoBreak] in \
\[NoBreak]\\!\\(Cos[x_]\\)\[NoBreak] is Protected. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/write\\\", ButtonNote -> \
\\\"SetDelayed::write\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.658669616000553*^9, 3.658669634651717*^9}}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.6586696160015535`*^9, 3.6586696346527176`*^9}}]
}, Open  ]],

Cell[TextData[{
 "The cosine function (and all of the other trigonometric functions) are \
predefined in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s library. They are protected so that they can\
\[CloseCurlyQuote]t be overwritten."
}], "Text",
 CellChangeTimes->{{3.658669638385353*^9, 3.658669702325514*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Input Pattern Restriction", "Subsection",
 CellChangeTimes->{{3.658669795959566*^9, 3.6586698069823713`*^9}, {
  3.6586755889117727`*^9, 3.658675592143046*^9}}],

Cell[TextData[{
 "You can restrict the type of input for a function by specifying a pattern \
after the underscore. If no restriction is applied, then ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " assumes the input can be any numeric value or expression."
}], "Text",
 CellChangeTimes->{{3.6586698081641693`*^9, 3.658669823197794*^9}, {
  3.6586702614060717`*^9, 3.6586702711589146`*^9}, {3.658670413144115*^9, 
  3.658670453935909*^9}, {3.658675598840772*^9, 3.658675616796444*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"R", "[", "x_Integer", "]"}], ":=", 
  SuperscriptBox["x", "2"]}]], "Input",
 CellChangeTimes->{{3.6586698246498156`*^9, 3.6586698262069144`*^9}, {
  3.6586701755144205`*^9, 3.6586701777249727`*^9}, {3.6586702286859546`*^9, 
  3.6586702573041353`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox["R", TraditionalForm]]],
 " will only evaluate for values of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " that are integers. Otherwise it will leave the answer in symbolic form."
}], "Text",
 CellChangeTimes->{{3.6586702728981495`*^9, 3.658670302063775*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"t4", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"R", "[", "x", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "5", ",", 
       FractionBox["1", "2"]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{"t4", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<x\>\"", ",", "\"\<F[x]\>\""}], "}"}]}], "}"}]}], ",", 
   RowBox[{"TableAlignments", "\[Rule]", "\"\<.\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6586692739329643`*^9, 3.658669402757064*^9}, {
  3.6586694362266827`*^9, 3.6586694650170174`*^9}, {3.6586703321159306`*^9, 
  3.658670392809763*^9}, {3.658675136052173*^9, 3.658675138951219*^9}}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\<\"x\"\>",
       HoldForm], 
      TagBox["\<\"F[x]\"\>",
       HoldForm]},
     {"0", "0"},
     {
      FractionBox["1", "2"], 
      RowBox[{"R", "[", 
       FractionBox["1", "2"], "]"}]},
     {"1", "1"},
     {
      FractionBox["3", "2"], 
      RowBox[{"R", "[", 
       FractionBox["3", "2"], "]"}]},
     {"2", "4"},
     {
      FractionBox["5", "2"], 
      RowBox[{"R", "[", 
       FractionBox["5", "2"], "]"}]},
     {"3", "9"},
     {
      FractionBox["7", "2"], 
      RowBox[{"R", "[", 
       FractionBox["7", "2"], "]"}]},
     {"4", "16"},
     {
      FractionBox["9", "2"], 
      RowBox[{"R", "[", 
       FractionBox["9", "2"], "]"}]},
     {"5", "25"}
    },
    GridBoxAlignment->{
     "Columns" -> {{"."}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, TableHeadings -> {None, {"x", "F[x]"}}, TableAlignments -> 
    "."]]]], "Output",
 CellChangeTimes->{{3.658670341325431*^9, 3.65867039385351*^9}, 
   3.658675139030275*^9}]
}, Open  ]],

Cell["\<\
Other options for restriction include String, Number, Real, and much more.\
\>", "Text",
 CellChangeTimes->{{3.694576058196041*^9, 3.694576092327351*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
You can include multiple input values by separating them with a comma.\
\>", "Subsection",
 CellChangeTimes->{{3.6586752591910753`*^9, 3.658675276793497*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Q", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"x", "*", 
   SuperscriptBox["y", "2"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"t5", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Q", "[", 
      RowBox[{"i", ",", "j"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", 
       RowBox[{"-", "3"}], ",", "2", ",", "1"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", "t5", "]"}]}], "Input",
 CellChangeTimes->{{3.658675280259944*^9, 3.658675399157852*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"9", "4", "1", "0", "1", "4"},
    {"18", "8", "2", "0", "2", "8"},
    {"27", "12", "3", "0", "3", "12"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.6586753352237325`*^9, 3.6586753992869434`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.3\tOther Syntax things", "Section",
 CellChangeTimes->{{3.658675685391571*^9, 3.6586756915058775`*^9}}],

Cell[CellGroupData[{

Cell["Postfix", "Subsection",
 CellChangeTimes->{{3.658675412555307*^9, 3.6586754263620567`*^9}}],

Cell["\<\
For functions that require only one input parameter, you can simply use a \
postfix to apply that function to the calculated results. For example, \
MatrixForm.\
\>", "Text",
 CellChangeTimes->{{3.658675449323267*^9, 3.6586755150556517`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    SubscriptBox["a", 
     RowBox[{"i", ",", "j"}]], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "4", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "5", ",", "1"}], "}"}]}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.6586754153772984`*^9, 3.6586754155033875`*^9}, {
  3.6586755179076557`*^9, 3.6586755406917353`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      SubscriptBox["a", 
       RowBox[{"1", ",", "1"}]], 
      SubscriptBox["a", 
       RowBox[{"1", ",", "2"}]], 
      SubscriptBox["a", 
       RowBox[{"1", ",", "3"}]], 
      SubscriptBox["a", 
       RowBox[{"1", ",", "4"}]], 
      SubscriptBox["a", 
       RowBox[{"1", ",", "5"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"2", ",", "1"}]], 
      SubscriptBox["a", 
       RowBox[{"2", ",", "2"}]], 
      SubscriptBox["a", 
       RowBox[{"2", ",", "3"}]], 
      SubscriptBox["a", 
       RowBox[{"2", ",", "4"}]], 
      SubscriptBox["a", 
       RowBox[{"2", ",", "5"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"3", ",", "1"}]], 
      SubscriptBox["a", 
       RowBox[{"3", ",", "2"}]], 
      SubscriptBox["a", 
       RowBox[{"3", ",", "3"}]], 
      SubscriptBox["a", 
       RowBox[{"3", ",", "4"}]], 
      SubscriptBox["a", 
       RowBox[{"3", ",", "5"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"4", ",", "1"}]], 
      SubscriptBox["a", 
       RowBox[{"4", ",", "2"}]], 
      SubscriptBox["a", 
       RowBox[{"4", ",", "3"}]], 
      SubscriptBox["a", 
       RowBox[{"4", ",", "4"}]], 
      SubscriptBox["a", 
       RowBox[{"4", ",", "5"}]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.658675541252143*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Part", "Subsection",
 CellChangeTimes->{{3.6586757500577297`*^9, 3.6586757548030944`*^9}}],

Cell["\<\
You can refer to specific parts of a table using double hard brackets [[ and \
]] or by the special character \[LeftDoubleBracket] and \[RightDoubleBracket].\
\>", "Text",
 CellChangeTimes->{{3.6586757561640387`*^9, 3.6586757677109776`*^9}, {
  3.6586758816013145`*^9, 3.6586759280301714`*^9}}],

Cell[BoxData[
 RowBox[{"listName", "[", 
  RowBox[{"[", 
   RowBox[{"row", ",", "col"}], "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.6586759365591908`*^9, 3.6586759462120028`*^9}, {
  3.6586759975851088`*^9, 3.6586759980294223`*^9}, {3.6586760744753723`*^9, 
  3.6586760777046633`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"l6", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     SubscriptBox["a", "i"], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"t6", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     SubscriptBox["a", 
      RowBox[{"i", ",", "j"}]], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "4", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "5", ",", "1"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", "l6", "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", "t6", "]"}]}], "Input",
 CellChangeTimes->{{3.6586758929513063`*^9, 3.6586759133156776`*^9}, {
  3.658675951302595*^9, 3.6586759812836046`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["a", "1"], ",", 
   SubscriptBox["a", "2"], ",", 
   SubscriptBox["a", "3"], ",", 
   SubscriptBox["a", "4"], ",", 
   SubscriptBox["a", "5"], ",", 
   SubscriptBox["a", "6"], ",", 
   SubscriptBox["a", "7"], ",", 
   SubscriptBox["a", "8"], ",", 
   SubscriptBox["a", "9"], ",", 
   SubscriptBox["a", "10"]}], "}"}]], "Output",
 CellChangeTimes->{{3.6586759618420334`*^9, 3.658675982157222*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     SubscriptBox["a", 
      RowBox[{"1", ",", "1"}]], 
     SubscriptBox["a", 
      RowBox[{"1", ",", "2"}]], 
     SubscriptBox["a", 
      RowBox[{"1", ",", "3"}]], 
     SubscriptBox["a", 
      RowBox[{"1", ",", "4"}]], 
     SubscriptBox["a", 
      RowBox[{"1", ",", "5"}]]},
    {
     SubscriptBox["a", 
      RowBox[{"2", ",", "1"}]], 
     SubscriptBox["a", 
      RowBox[{"2", ",", "2"}]], 
     SubscriptBox["a", 
      RowBox[{"2", ",", "3"}]], 
     SubscriptBox["a", 
      RowBox[{"2", ",", "4"}]], 
     SubscriptBox["a", 
      RowBox[{"2", ",", "5"}]]},
    {
     SubscriptBox["a", 
      RowBox[{"3", ",", "1"}]], 
     SubscriptBox["a", 
      RowBox[{"3", ",", "2"}]], 
     SubscriptBox["a", 
      RowBox[{"3", ",", "3"}]], 
     SubscriptBox["a", 
      RowBox[{"3", ",", "4"}]], 
     SubscriptBox["a", 
      RowBox[{"3", ",", "5"}]]},
    {
     SubscriptBox["a", 
      RowBox[{"4", ",", "1"}]], 
     SubscriptBox["a", 
      RowBox[{"4", ",", "2"}]], 
     SubscriptBox["a", 
      RowBox[{"4", ",", "3"}]], 
     SubscriptBox["a", 
      RowBox[{"4", ",", "4"}]], 
     SubscriptBox["a", 
      RowBox[{"4", ",", "5"}]]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.6586759618420334`*^9, 3.6586759821592226`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"l6", "\[LeftDoubleBracket]", "8", 
  "\[RightDoubleBracket]"}]], "Input",
 CellChangeTimes->{{3.6586759880323677`*^9, 3.658675992911811*^9}}],

Cell[BoxData[
 SubscriptBox["a", "8"]], "Output",
 CellChangeTimes->{3.6586759933421288`*^9}]
}, Open  ]],

Cell["\<\
You can access whole rows of a matrix using one index, or by supplying two \
indices, you can get an element from a row.\
\>", "Text",
 CellChangeTimes->{{3.658676006336286*^9, 3.6586760511959543`*^9}, 
   3.6945761242073727`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"t6", "\[LeftDoubleBracket]", "2", 
  "\[RightDoubleBracket]"}]], "Input",
 CellChangeTimes->{{3.658676054019936*^9, 3.6586760582429175`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["a", 
    RowBox[{"2", ",", "1"}]], ",", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "2"}]], ",", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "3"}]], ",", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "4"}]], ",", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "5"}]]}], "}"}]], "Output",
 CellChangeTimes->{3.658676058328978*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"t6", "\[LeftDoubleBracket]", 
  RowBox[{"2", ",", "3"}], "\[RightDoubleBracket]"}]], "Input",
 CellChangeTimes->{{3.658676054019936*^9, 3.6586760626840506`*^9}}],

Cell[BoxData[
 SubscriptBox["a", 
  RowBox[{"2", ",", "3"}]]], "Output",
 CellChangeTimes->{3.6586760628171587`*^9}]
}, Open  ]],

Cell["\<\
Using double semi colons, you can get sections of a matrix or table.\
\>", "Text",
 CellChangeTimes->{{3.65867609781185*^9, 3.65867612374815*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"t6", "\[LeftDoubleBracket]", 
   RowBox[{
    RowBox[{"2", ";;", "3"}], ",", 
    RowBox[{"2", ";;", "4"}]}], "\[RightDoubleBracket]"}], "//", 
  "TableForm"}]], "Input",
 CellChangeTimes->{{3.658676124412614*^9, 3.6586761585677176`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     SubscriptBox["a", 
      RowBox[{"2", ",", "2"}]], 
     SubscriptBox["a", 
      RowBox[{"2", ",", "3"}]], 
     SubscriptBox["a", 
      RowBox[{"2", ",", "4"}]]},
    {
     SubscriptBox["a", 
      RowBox[{"3", ",", "2"}]], 
     SubscriptBox["a", 
      RowBox[{"3", ",", "3"}]], 
     SubscriptBox["a", 
      RowBox[{"3", ",", "4"}]]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.6586761386686745`*^9, 3.6586761587178364`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 2031},
WindowMargins->{{0, Automatic}, {0, 74}},
Magnification:>1.15 Inherited,
FrontEndVersion->"11.0 for Linux x86 (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 211, 7, 170, "Title"],
Cell[794, 31, 115, 2, 96, "Chapter"]
}, Open  ]],
Cell[CellGroupData[{
Cell[946, 38, 175, 3, 147, "Title"],
Cell[CellGroupData[{
Cell[1146, 45, 113, 1, 114, "Section"],
Cell[1262, 48, 701, 12, 225, "Text"],
Cell[CellGroupData[{
Cell[1988, 64, 163, 2, 80, "Subsection"],
Cell[2154, 68, 560, 11, 140, "Text"],
Cell[CellGroupData[{
Cell[2739, 83, 103, 1, 67, "Subsubsection"],
Cell[2845, 86, 254, 6, 55, "Text"],
Cell[CellGroupData[{
Cell[3124, 96, 245, 8, 127, "Input"],
Cell[3372, 106, 326, 9, 55, "Output"]
}, Open  ]],
Cell[3713, 118, 407, 10, 100, "Text"],
Cell[CellGroupData[{
Cell[4145, 132, 160, 3, 55, "Input"],
Cell[4308, 137, 710, 20, 127, "Output"]
}, Open  ]],
Cell[5033, 160, 270, 5, 98, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5340, 170, 102, 1, 67, "Subsubsection"],
Cell[5445, 173, 184, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[5654, 181, 414, 10, 165, "Input"],
Cell[6071, 193, 536, 13, 55, "Output"]
}, Open  ]],
Cell[6622, 209, 219, 4, 98, "Text"],
Cell[CellGroupData[{
Cell[6866, 217, 159, 3, 55, "Input"],
Cell[7028, 222, 754, 21, 165, "Output"]
}, Open  ]],
Cell[7797, 246, 359, 6, 140, "Text"],
Cell[CellGroupData[{
Cell[8181, 256, 442, 12, 63, "Input"],
Cell[8626, 270, 1466, 47, 204, "Output"]
}, Open  ]],
Cell[10107, 320, 202, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[10334, 328, 546, 13, 63, "Input"],
Cell[10883, 343, 1446, 47, 204, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[12390, 397, 104, 1, 80, "Subsection"],
Cell[12497, 400, 482, 8, 140, "Text"],
Cell[12982, 410, 116, 1, 55, "Text"],
Cell[13101, 413, 236, 6, 75, "Code"],
Cell[13340, 421, 429, 8, 225, "Text"],
Cell[CellGroupData[{
Cell[13794, 433, 300, 7, 63, "Input"],
Cell[CellGroupData[{
Cell[14119, 444, 69, 1, 43, "Print"],
Cell[14191, 447, 69, 1, 43, "Print"],
Cell[14263, 450, 69, 1, 43, "Print"],
Cell[14335, 453, 69, 1, 43, "Print"],
Cell[14407, 456, 71, 1, 43, "Print"],
Cell[14481, 459, 71, 1, 43, "Print"],
Cell[14555, 462, 68, 1, 43, "Print"],
Cell[14626, 465, 68, 1, 43, "Print"],
Cell[14697, 468, 71, 1, 43, "Print"],
Cell[14771, 471, 72, 1, 43, "Print"]
}, Open  ]]
}, Open  ]],
Cell[14870, 476, 139, 1, 55, "Text"],
Cell[CellGroupData[{
Cell[15034, 481, 361, 9, 63, "Input"],
Cell[CellGroupData[{
Cell[15420, 494, 71, 1, 43, "Print"],
Cell[15494, 497, 74, 1, 43, "Print"],
Cell[15571, 500, 74, 1, 43, "Print"],
Cell[15648, 503, 74, 1, 43, "Print"],
Cell[15725, 506, 72, 1, 43, "Print"],
Cell[15800, 509, 72, 1, 43, "Print"],
Cell[15875, 512, 74, 1, 43, "Print"],
Cell[15952, 515, 89, 1, 43, "Print"],
Cell[16044, 518, 74, 1, 43, "Print"],
Cell[16121, 521, 74, 1, 43, "Print"],
Cell[16198, 524, 73, 1, 43, "Print"],
Cell[16274, 527, 74, 1, 43, "Print"],
Cell[16351, 530, 74, 1, 43, "Print"],
Cell[16428, 533, 72, 1, 43, "Print"],
Cell[16503, 536, 87, 1, 43, "Print"],
Cell[16593, 539, 72, 1, 43, "Print"]
}, Open  ]]
}, Open  ]],
Cell[16692, 544, 191, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[16908, 552, 523, 15, 76, "Input"],
Cell[CellGroupData[{
Cell[17456, 571, 180, 4, 43, "Print"],
Cell[17639, 577, 220, 5, 43, "Print"],
Cell[17862, 584, 200, 4, 43, "Print"],
Cell[18065, 590, 217, 5, 43, "Print"],
Cell[18285, 597, 216, 5, 43, "Print"],
Cell[18504, 604, 183, 4, 43, "Print"],
Cell[18690, 610, 217, 5, 43, "Print"],
Cell[18910, 617, 234, 6, 43, "Print"],
Cell[19147, 625, 196, 4, 43, "Print"],
Cell[19346, 631, 182, 4, 43, "Print"],
Cell[19531, 637, 180, 4, 43, "Print"]
}, Open  ]]
}, Open  ]],
Cell[19738, 645, 309, 6, 98, "Text"],
Cell[CellGroupData[{
Cell[20072, 655, 472, 12, 63, "Input"],
Cell[CellGroupData[{
Cell[20569, 671, 69, 1, 43, "Print"],
Cell[20641, 674, 69, 1, 43, "Print"],
Cell[20713, 677, 71, 1, 43, "Print"],
Cell[20787, 680, 71, 1, 43, "Print"],
Cell[20861, 683, 71, 1, 43, "Print"],
Cell[20935, 686, 71, 1, 43, "Print"],
Cell[21009, 689, 71, 1, 43, "Print"],
Cell[21083, 692, 71, 1, 43, "Print"],
Cell[21157, 695, 69, 1, 43, "Print"]
}, Open  ]]
}, Open  ]],
Cell[21253, 700, 264, 5, 98, "Text"],
Cell[21520, 707, 206, 5, 75, "Code"],
Cell[21729, 714, 161, 3, 55, "Text"],
Cell[21893, 719, 269, 6, 75, "Code"],
Cell[22165, 727, 125, 1, 55, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22327, 733, 92, 1, 80, "Subsection"],
Cell[22422, 736, 158, 3, 55, "Text"],
Cell[22583, 741, 247, 5, 119, "Code"],
Cell[22833, 748, 309, 8, 55, "Text"],
Cell[CellGroupData[{
Cell[23167, 760, 465, 12, 234, "Input"],
Cell[CellGroupData[{
Cell[23657, 776, 71, 1, 43, "Print"],
Cell[23731, 779, 71, 1, 43, "Print"],
Cell[23805, 782, 71, 1, 43, "Print"],
Cell[23879, 785, 71, 1, 43, "Print"],
Cell[23953, 788, 69, 1, 43, "Print"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[24083, 796, 93, 1, 80, "Subsection"],
Cell[24179, 799, 379, 7, 140, "Text"],
Cell[24561, 808, 320, 6, 98, "Text"],
Cell[CellGroupData[{
Cell[24906, 818, 219, 5, 63, "Input"],
Cell[25128, 825, 317, 6, 55, "Output"]
}, Open  ]],
Cell[25460, 834, 118, 1, 55, "Text"],
Cell[CellGroupData[{
Cell[25603, 839, 246, 6, 76, "Input"],
Cell[25852, 847, 340, 7, 55, "Output"]
}, Open  ]],
Cell[26207, 857, 194, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[26426, 865, 381, 10, 63, "Input"],
Cell[26810, 877, 1747, 44, 248, "Output"]
}, Open  ]],
Cell[28572, 924, 128, 1, 55, "Text"],
Cell[CellGroupData[{
Cell[28725, 929, 624, 16, 63, "Input"],
Cell[29352, 947, 2438, 78, 432, "Output"]
}, Open  ]],
Cell[31805, 1028, 118, 1, 55, "Text"],
Cell[CellGroupData[{
Cell[31948, 1033, 390, 11, 63, "Input"],
Cell[32341, 1046, 2103, 71, 218, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[34493, 1123, 102, 1, 80, "Subsection"],
Cell[CellGroupData[{
Cell[34620, 1128, 100, 1, 67, "Subsubsection"],
Cell[34723, 1131, 287, 5, 98, "Text"],
Cell[35013, 1138, 152, 3, 75, "Code"],
Cell[35168, 1143, 166, 4, 98, "Text"],
Cell[CellGroupData[{
Cell[35359, 1151, 268, 8, 76, "Input"],
Cell[35630, 1161, 253, 7, 55, "Output"]
}, Open  ]],
Cell[35898, 1171, 144, 1, 55, "Text"],
Cell[CellGroupData[{
Cell[36067, 1176, 275, 7, 104, "Input"],
Cell[36345, 1185, 254, 8, 94, "Output"]
}, Open  ]],
Cell[36614, 1196, 297, 6, 55, "Text"],
Cell[CellGroupData[{
Cell[36936, 1206, 326, 10, 76, "Input"],
Cell[37265, 1218, 9140, 275, 2156, "Output"]
}, Open  ]],
Cell[46420, 1496, 251, 5, 98, "Text"],
Cell[CellGroupData[{
Cell[46696, 1505, 377, 11, 76, "Input"],
Cell[47076, 1518, 637, 17, 55, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[47762, 1541, 99, 1, 67, "Subsubsection"],
Cell[47864, 1544, 167, 3, 55, "Text"],
Cell[CellGroupData[{
Cell[48056, 1551, 318, 9, 76, "Input"],
Cell[48377, 1562, 1000, 26, 104, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[49438, 1595, 167, 2, 80, "Subsection"],
Cell[CellGroupData[{
Cell[49630, 1601, 70, 1, 67, "Subsubsection"],
Cell[49703, 1604, 198, 4, 98, "Text"],
Cell[CellGroupData[{
Cell[49926, 1612, 170, 4, 76, "Input"],
Cell[50099, 1618, 115, 2, 55, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50251, 1625, 290, 7, 76, "Input"],
Cell[50544, 1634, 202, 5, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50783, 1644, 314, 8, 76, "Input"],
Cell[51100, 1654, 206, 4, 60, "Output"]
}, Open  ]],
Cell[51321, 1661, 176, 2, 55, "Text"],
Cell[CellGroupData[{
Cell[51522, 1667, 365, 10, 76, "Input"],
Cell[51890, 1679, 154, 3, 60, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[52093, 1688, 104, 1, 67, "Subsubsection"],
Cell[52200, 1691, 107, 1, 55, "Text"],
Cell[CellGroupData[{
Cell[52332, 1696, 259, 6, 76, "Input"],
Cell[52594, 1704, 166, 4, 60, "Output"]
}, Open  ]],
Cell[52775, 1711, 128, 1, 55, "Text"],
Cell[CellGroupData[{
Cell[52928, 1716, 320, 7, 76, "Input"],
Cell[53251, 1725, 165, 5, 103, "Output"]
}, Open  ]],
Cell[53431, 1733, 121, 1, 55, "Text"],
Cell[CellGroupData[{
Cell[53577, 1738, 277, 7, 76, "Input"],
Cell[53857, 1747, 116, 3, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54010, 1755, 359, 10, 76, "Input"],
Cell[54372, 1767, 75, 1, 55, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[54508, 1775, 93, 1, 80, "Subsection"],
Cell[54604, 1778, 420, 7, 140, "Text"],
Cell[55027, 1787, 113, 1, 55, "Text"],
Cell[55143, 1790, 215, 5, 75, "Code"],
Cell[55361, 1797, 118, 1, 55, "Text"],
Cell[CellGroupData[{
Cell[55504, 1802, 253, 7, 76, "Input"],
Cell[55760, 1811, 6723, 121, 294, "Output"]
}, Open  ]],
Cell[62498, 1935, 121, 1, 55, "Text"],
Cell[CellGroupData[{
Cell[62644, 1940, 456, 14, 107, "Input"],
Cell[63103, 1956, 12611, 219, 294, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75751, 2180, 104, 1, 67, "Subsubsection"],
Cell[75858, 2183, 166, 3, 55, "Text"],
Cell[76027, 2188, 391, 12, 77, "Code"],
Cell[CellGroupData[{
Cell[76443, 2204, 766, 24, 107, "Input"],
Cell[77212, 2230, 10367, 179, 276, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[87628, 2415, 99, 1, 67, "Subsubsection"],
Cell[87730, 2418, 339, 6, 98, "Text"],
Cell[CellGroupData[{
Cell[88094, 2428, 909, 26, 76, "Input"],
Cell[89006, 2456, 14206, 244, 319, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103249, 2705, 1028, 29, 148, "Input"],
Cell[104280, 2736, 14646, 252, 319, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[118975, 2994, 109, 1, 67, "Subsubsection"],
Cell[119087, 2997, 299, 7, 98, "Text"],
Cell[CellGroupData[{
Cell[119411, 3008, 355, 10, 125, "Input"],
Cell[119769, 3020, 809, 23, 276, "Output"]
}, Open  ]],
Cell[120593, 3046, 207, 6, 55, "Text"],
Cell[CellGroupData[{
Cell[120825, 3056, 350, 10, 125, "Input"],
Cell[121178, 3068, 6717, 121, 294, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[127944, 3195, 159, 2, 67, "Subsubsection"],
Cell[128106, 3199, 360, 9, 57, "Text"],
Cell[CellGroupData[{
Cell[128491, 3212, 384, 11, 55, "Input"],
Cell[128878, 3225, 2002, 44, 294, "Output"]
}, Open  ]],
Cell[130895, 3272, 204, 5, 55, "Text"],
Cell[CellGroupData[{
Cell[131124, 3281, 616, 19, 55, "Input"],
Cell[131743, 3302, 29886, 502, 276, "Output"]
}, Open  ]],
Cell[161644, 3807, 136, 1, 55, "Text"],
Cell[CellGroupData[{
Cell[161805, 3812, 583, 19, 89, "Input"],
Cell[162391, 3833, 4152, 76, 302, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[166616, 3917, 161, 2, 114, "Section"],
Cell[CellGroupData[{
Cell[166802, 3923, 94, 1, 80, "Subsection"],
Cell[166899, 3926, 390, 8, 98, "Text"],
Cell[167292, 3936, 169, 4, 62, "Input"],
Cell[167464, 3942, 200, 6, 57, "Text"],
Cell[CellGroupData[{
Cell[167689, 3952, 806, 22, 112, "Input"],
Cell[168498, 3976, 1600, 54, 698, "Output"]
}, Open  ]],
Cell[170113, 4033, 167, 2, 55, "Text"],
Cell[CellGroupData[{
Cell[170305, 4039, 259, 7, 55, "Input"],
Cell[170567, 4048, 6725, 121, 294, "Output"]
}, Open  ]],
Cell[177307, 4172, 284, 7, 98, "Text"],
Cell[177594, 4181, 192, 4, 62, "Input"],
Cell[CellGroupData[{
Cell[177811, 4189, 173, 4, 62, "Input"],
Cell[177987, 4195, 492, 9, 41, "Message"],
Cell[178482, 4206, 104, 1, 55, "Output"]
}, Open  ]],
Cell[178601, 4210, 339, 8, 98, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[178977, 4223, 166, 2, 80, "Subsection"],
Cell[179146, 4227, 492, 9, 98, "Text"],
Cell[179641, 4238, 286, 6, 62, "Input"],
Cell[179930, 4246, 310, 8, 98, "Text"],
Cell[CellGroupData[{
Cell[180265, 4258, 853, 22, 170, "Input"],
Cell[181121, 4282, 1579, 54, 605, "Output"]
}, Open  ]],
Cell[182715, 4339, 164, 3, 55, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182916, 4347, 168, 3, 80, "Subsection"],
Cell[CellGroupData[{
Cell[183109, 4354, 651, 19, 167, "Input"],
Cell[183763, 4375, 684, 18, 127, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[184508, 4400, 111, 1, 114, "Section"],
Cell[CellGroupData[{
Cell[184644, 4405, 97, 1, 80, "Subsection"],
Cell[184744, 4408, 252, 5, 98, "Text"],
Cell[CellGroupData[{
Cell[185021, 4417, 443, 12, 63, "Input"],
Cell[185467, 4431, 1801, 60, 177, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[187317, 4497, 96, 1, 80, "Subsection"],
Cell[187416, 4500, 304, 5, 98, "Text"],
Cell[187723, 4507, 287, 6, 75, "Code"],
Cell[CellGroupData[{
Cell[188035, 4517, 782, 22, 217, "Input"],
Cell[188820, 4541, 452, 13, 55, "Output"],
Cell[189275, 4556, 1736, 59, 177, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191048, 4620, 165, 3, 55, "Input"],
Cell[191216, 4625, 93, 2, 55, "Output"]
}, Open  ]],
Cell[191324, 4630, 240, 5, 98, "Text"],
Cell[CellGroupData[{
Cell[191589, 4639, 165, 3, 55, "Input"],
Cell[191757, 4644, 385, 13, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192179, 4662, 185, 3, 55, "Input"],
Cell[192367, 4667, 116, 3, 59, "Output"]
}, Open  ]],
Cell[192498, 4673, 156, 3, 55, "Text"],
Cell[CellGroupData[{
Cell[192679, 4680, 273, 7, 55, "Input"],
Cell[192955, 4689, 926, 29, 95, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

